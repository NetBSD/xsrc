/* This file is automatically generated by mapi_abi.py.  Do not modify. */

#ifndef _GLAPI_TMP_H_
#define _GLAPI_TMP_H_
typedef int GLclampx;
#endif /* _GLAPI_TMP_H_ */

#ifdef MAPI_TMP_DEFINES
#define GL_GLEXT_PROTOTYPES
#include "GL/gl.h"
#include "GL/glext.h"

GLAPI void APIENTRY glActiveShaderProgram(GLuint pipeline, GLuint program);
GLAPI void APIENTRY glActiveTexture(GLenum texture);
GLAPI void APIENTRY glAttachShader(GLuint program, GLuint shader);
GLAPI void APIENTRY glBeginQuery(GLenum target, GLuint id);
GLAPI void APIENTRY glBeginTransformFeedback(GLenum primitiveMode);
GLAPI void APIENTRY glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
GLAPI void APIENTRY glBindBuffer(GLenum target, GLuint buffer);
GLAPI void APIENTRY glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
GLAPI void APIENTRY glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI void APIENTRY glBindFramebuffer(GLenum target, GLuint framebuffer);
GLAPI void APIENTRY glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
GLAPI void APIENTRY glBindProgramPipeline(GLuint pipeline);
GLAPI void APIENTRY glBindRenderbuffer(GLenum target, GLuint renderbuffer);
GLAPI void APIENTRY glBindSampler(GLuint unit, GLuint sampler);
GLAPI void APIENTRY glBindTexture(GLenum target, GLuint texture);
GLAPI void APIENTRY glBindTransformFeedback(GLenum target, GLuint id);
GLAPI void APIENTRY glBindVertexArray(GLuint array);
GLAPI void APIENTRY glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI void APIENTRY glBlendBarrier(void);
GLAPI void APIENTRY glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI void APIENTRY glBlendEquation(GLenum mode);
GLAPI void APIENTRY glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
GLAPI void APIENTRY glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GLAPI void APIENTRY glBlendEquationi(GLuint buf, GLenum mode);
GLAPI void APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor);
GLAPI void APIENTRY glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLAPI void APIENTRY glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GLAPI void APIENTRY glBlendFunci(GLuint buf, GLenum src, GLenum dst);
GLAPI void APIENTRY glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI void APIENTRY glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
GLAPI void APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
GLAPI GLenum APIENTRY glCheckFramebufferStatus(GLenum target);
GLAPI void APIENTRY glClear(GLbitfield mask);
GLAPI void APIENTRY glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI void APIENTRY glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
GLAPI void APIENTRY glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
GLAPI void APIENTRY glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
GLAPI void APIENTRY glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI void APIENTRY glClearDepthf(GLfloat d);
GLAPI void APIENTRY glClearStencil(GLint s);
GLAPI GLenum APIENTRY glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI void APIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI void APIENTRY glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLAPI void APIENTRY glCompileShader(GLuint shader);
GLAPI void APIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI void APIENTRY glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
GLAPI void APIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI void APIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI GLuint APIENTRY glCreateProgram(void);
GLAPI GLuint APIENTRY glCreateShader(GLenum type);
GLAPI GLuint APIENTRY glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const *strings);
GLAPI void APIENTRY glCullFace(GLenum mode);
GLAPI void APIENTRY glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
GLAPI void APIENTRY glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
GLAPI void APIENTRY glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
GLAPI void APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers);
GLAPI void APIENTRY glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
GLAPI void APIENTRY glDeleteProgram(GLuint program);
GLAPI void APIENTRY glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
GLAPI void APIENTRY glDeleteQueries(GLsizei n, const GLuint *ids);
GLAPI void APIENTRY glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
GLAPI void APIENTRY glDeleteSamplers(GLsizei count, const GLuint *samplers);
GLAPI void APIENTRY glDeleteShader(GLuint shader);
GLAPI void APIENTRY glDeleteSync(GLsync sync);
GLAPI void APIENTRY glDeleteTextures(GLsizei n, const GLuint *textures);
GLAPI void APIENTRY glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
GLAPI void APIENTRY glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
GLAPI void APIENTRY glDepthFunc(GLenum func);
GLAPI void APIENTRY glDepthMask(GLboolean flag);
GLAPI void APIENTRY glDepthRangef(GLfloat n, GLfloat f);
GLAPI void APIENTRY glDetachShader(GLuint program, GLuint shader);
GLAPI void APIENTRY glDisable(GLenum cap);
GLAPI void APIENTRY glDisableVertexAttribArray(GLuint index);
GLAPI void APIENTRY glDisablei(GLenum target, GLuint index);
GLAPI void APIENTRY glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
GLAPI void APIENTRY glDispatchComputeIndirect(GLintptr indirect);
GLAPI void APIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count);
GLAPI void APIENTRY glDrawArraysIndirect(GLenum mode, const void *indirect);
GLAPI void APIENTRY glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
GLAPI void APIENTRY glDrawBuffers(GLsizei n, const GLenum *bufs);
GLAPI void APIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices);
GLAPI void APIENTRY glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
GLAPI void APIENTRY glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect);
GLAPI void APIENTRY glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
GLAPI void APIENTRY glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
GLAPI void APIENTRY glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
GLAPI void APIENTRY glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
GLAPI void APIENTRY glEnable(GLenum cap);
GLAPI void APIENTRY glEnableVertexAttribArray(GLuint index);
GLAPI void APIENTRY glEnablei(GLenum target, GLuint index);
GLAPI void APIENTRY glEndQuery(GLenum target);
GLAPI void APIENTRY glEndTransformFeedback(void);
GLAPI GLsync APIENTRY glFenceSync(GLenum condition, GLbitfield flags);
GLAPI void APIENTRY glFinish(void);
GLAPI void APIENTRY glFlush(void);
GLAPI void APIENTRY glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
GLAPI void APIENTRY glFramebufferParameteri(GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI void APIENTRY glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
GLAPI void APIENTRY glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI void APIENTRY glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI void APIENTRY glFrontFace(GLenum mode);
GLAPI void APIENTRY glGenBuffers(GLsizei n, GLuint *buffers);
GLAPI void APIENTRY glGenFramebuffers(GLsizei n, GLuint *framebuffers);
GLAPI void APIENTRY glGenProgramPipelines(GLsizei n, GLuint *pipelines);
GLAPI void APIENTRY glGenQueries(GLsizei n, GLuint *ids);
GLAPI void APIENTRY glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
GLAPI void APIENTRY glGenSamplers(GLsizei count, GLuint *samplers);
GLAPI void APIENTRY glGenTextures(GLsizei n, GLuint *textures);
GLAPI void APIENTRY glGenTransformFeedbacks(GLsizei n, GLuint *ids);
GLAPI void APIENTRY glGenVertexArrays(GLsizei n, GLuint *arrays);
GLAPI void APIENTRY glGenerateMipmap(GLenum target);
GLAPI void APIENTRY glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLAPI void APIENTRY glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLAPI void APIENTRY glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
GLAPI void APIENTRY glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLAPI GLint APIENTRY glGetAttribLocation(GLuint program, const GLchar *name);
GLAPI void APIENTRY glGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
GLAPI void APIENTRY glGetBooleanv(GLenum pname, GLboolean *data);
GLAPI void APIENTRY glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
GLAPI void APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetBufferPointerv(GLenum target, GLenum pname, void **params);
GLAPI GLuint APIENTRY glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
GLAPI GLenum APIENTRY glGetError(void);
GLAPI void APIENTRY glGetFloatv(GLenum pname, GLfloat *data);
GLAPI GLint APIENTRY glGetFragDataLocation(GLuint program, const GLchar *name);
GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
GLAPI GLenum APIENTRY glGetGraphicsResetStatus(void);
GLAPI void APIENTRY glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
GLAPI void APIENTRY glGetInteger64v(GLenum pname, GLint64 *data);
GLAPI void APIENTRY glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
GLAPI void APIENTRY glGetIntegerv(GLenum pname, GLint *data);
GLAPI void APIENTRY glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
GLAPI void APIENTRY glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
GLAPI void APIENTRY glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
GLAPI void APIENTRY glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
GLAPI void APIENTRY glGetPointerv(GLenum pname, void **params);
GLAPI void APIENTRY glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
GLAPI void APIENTRY glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI void APIENTRY glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI void APIENTRY glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
GLAPI GLuint APIENTRY glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
GLAPI GLint APIENTRY glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
GLAPI void APIENTRY glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLAPI void APIENTRY glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
GLAPI void APIENTRY glGetProgramiv(GLuint program, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
GLAPI void APIENTRY glGetQueryiv(GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
GLAPI void APIENTRY glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI void APIENTRY glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
GLAPI void APIENTRY glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
GLAPI void APIENTRY glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
GLAPI const GLubyte * APIENTRY glGetString(GLenum name);
GLAPI const GLubyte * APIENTRY glGetStringi(GLenum name, GLuint index);
GLAPI void APIENTRY glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
GLAPI void APIENTRY glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
GLAPI void APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
GLAPI GLuint APIENTRY glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
GLAPI void APIENTRY glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const *uniformNames, GLuint *uniformIndices);
GLAPI GLint APIENTRY glGetUniformLocation(GLuint program, const GLchar *name);
GLAPI void APIENTRY glGetUniformfv(GLuint program, GLint location, GLfloat *params);
GLAPI void APIENTRY glGetUniformiv(GLuint program, GLint location, GLint *params);
GLAPI void APIENTRY glGetUniformuiv(GLuint program, GLint location, GLuint *params);
GLAPI void APIENTRY glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
GLAPI void APIENTRY glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer);
GLAPI void APIENTRY glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
GLAPI void APIENTRY glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params);
GLAPI void APIENTRY glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
GLAPI void APIENTRY glHint(GLenum target, GLenum mode);
GLAPI void APIENTRY glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
GLAPI void APIENTRY glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI GLboolean APIENTRY glIsBuffer(GLuint buffer);
GLAPI GLboolean APIENTRY glIsEnabled(GLenum cap);
GLAPI GLboolean APIENTRY glIsEnabledi(GLenum target, GLuint index);
GLAPI GLboolean APIENTRY glIsFramebuffer(GLuint framebuffer);
GLAPI GLboolean APIENTRY glIsProgram(GLuint program);
GLAPI GLboolean APIENTRY glIsProgramPipeline(GLuint pipeline);
GLAPI GLboolean APIENTRY glIsQuery(GLuint id);
GLAPI GLboolean APIENTRY glIsRenderbuffer(GLuint renderbuffer);
GLAPI GLboolean APIENTRY glIsSampler(GLuint sampler);
GLAPI GLboolean APIENTRY glIsShader(GLuint shader);
GLAPI GLboolean APIENTRY glIsSync(GLsync sync);
GLAPI GLboolean APIENTRY glIsTexture(GLuint texture);
GLAPI GLboolean APIENTRY glIsTransformFeedback(GLuint id);
GLAPI GLboolean APIENTRY glIsVertexArray(GLuint array);
GLAPI void APIENTRY glLineWidth(GLfloat width);
GLAPI void APIENTRY glLinkProgram(GLuint program);
GLAPI void * APIENTRY glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI void APIENTRY glMemoryBarrier(GLbitfield barriers);
GLAPI void APIENTRY glMemoryBarrierByRegion(GLbitfield barriers);
GLAPI void APIENTRY glMinSampleShading(GLfloat value);
GLAPI void APIENTRY glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
GLAPI void APIENTRY glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
GLAPI void APIENTRY glPatchParameteri(GLenum pname, GLint value);
GLAPI void APIENTRY glPauseTransformFeedback(void);
GLAPI void APIENTRY glPixelStorei(GLenum pname, GLint param);
GLAPI void APIENTRY glPolygonOffset(GLfloat factor, GLfloat units);
GLAPI void APIENTRY glPopDebugGroup(void);
GLAPI void APIENTRY glPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
GLAPI void APIENTRY glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
GLAPI void APIENTRY glProgramParameteri(GLuint program, GLenum pname, GLint value);
GLAPI void APIENTRY glProgramUniform1f(GLuint program, GLint location, GLfloat v0);
GLAPI void APIENTRY glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform1i(GLuint program, GLint location, GLint v0);
GLAPI void APIENTRY glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
GLAPI void APIENTRY glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
GLAPI void APIENTRY glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
GLAPI void APIENTRY glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
GLAPI void APIENTRY glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI void APIENTRY glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GLAPI void APIENTRY glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI void APIENTRY glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI void APIENTRY glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI void APIENTRY glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI void APIENTRY glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
GLAPI void APIENTRY glReadBuffer(GLenum src);
GLAPI void APIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
GLAPI void APIENTRY glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
GLAPI void APIENTRY glReleaseShaderCompiler(void);
GLAPI void APIENTRY glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glResumeTransformFeedback(void);
GLAPI void APIENTRY glSampleCoverage(GLfloat value, GLboolean invert);
GLAPI void APIENTRY glSampleMaski(GLuint maskNumber, GLbitfield mask);
GLAPI void APIENTRY glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
GLAPI void APIENTRY glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
GLAPI void APIENTRY glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
GLAPI void APIENTRY glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
GLAPI void APIENTRY glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
GLAPI void APIENTRY glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
GLAPI void APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
GLAPI void APIENTRY glShaderSource(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length);
GLAPI void APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask);
GLAPI void APIENTRY glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
GLAPI void APIENTRY glStencilMask(GLuint mask);
GLAPI void APIENTRY glStencilMaskSeparate(GLenum face, GLuint mask);
GLAPI void APIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
GLAPI void APIENTRY glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
GLAPI void APIENTRY glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
GLAPI void APIENTRY glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI void APIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
GLAPI void APIENTRY glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
GLAPI void APIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param);
GLAPI void APIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
GLAPI void APIENTRY glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI void APIENTRY glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI void APIENTRY glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI void APIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode);
GLAPI void APIENTRY glUniform1f(GLint location, GLfloat v0);
GLAPI void APIENTRY glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform1i(GLint location, GLint v0);
GLAPI void APIENTRY glUniform1iv(GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniform1ui(GLint location, GLuint v0);
GLAPI void APIENTRY glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glUniform2f(GLint location, GLfloat v0, GLfloat v1);
GLAPI void APIENTRY glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform2i(GLint location, GLint v0, GLint v1);
GLAPI void APIENTRY glUniform2iv(GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniform2ui(GLint location, GLuint v0, GLuint v1);
GLAPI void APIENTRY glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI void APIENTRY glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
GLAPI void APIENTRY glUniform3iv(GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI void APIENTRY glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI void APIENTRY glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI void APIENTRY glUniform4iv(GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI void APIENTRY glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
GLAPI void APIENTRY glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI GLboolean APIENTRY glUnmapBuffer(GLenum target);
GLAPI void APIENTRY glUseProgram(GLuint program);
GLAPI void APIENTRY glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
GLAPI void APIENTRY glValidateProgram(GLuint program);
GLAPI void APIENTRY glValidateProgramPipeline(GLuint pipeline);
GLAPI void APIENTRY glVertexAttrib1f(GLuint index, GLfloat x);
GLAPI void APIENTRY glVertexAttrib1fv(GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
GLAPI void APIENTRY glVertexAttrib2fv(GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glVertexAttrib3fv(GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI void APIENTRY glVertexAttrib4fv(GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
GLAPI void APIENTRY glVertexAttribDivisor(GLuint index, GLuint divisor);
GLAPI void APIENTRY glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI void APIENTRY glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI void APIENTRY glVertexAttribI4iv(GLuint index, const GLint *v);
GLAPI void APIENTRY glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI void APIENTRY glVertexAttribI4uiv(GLuint index, const GLuint *v);
GLAPI void APIENTRY glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI void APIENTRY glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
GLAPI void APIENTRY glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
GLAPI void APIENTRY glVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
GLAPI void APIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
#undef MAPI_TMP_DEFINES
#endif /* MAPI_TMP_DEFINES */

#ifdef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN
GLAPI void APIENTRY glActiveShaderProgram(GLuint pipeline, GLuint program)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1098];
   ((void (APIENTRY *)(GLuint pipeline, GLuint program)) _func)(pipeline, program);
}

GLAPI void APIENTRY glActiveTexture(GLenum texture)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[374];
   ((void (APIENTRY *)(GLenum texture)) _func)(texture);
}

GLAPI void APIENTRY glAttachShader(GLuint program, GLuint shader)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[479];
   ((void (APIENTRY *)(GLuint program, GLuint shader)) _func)(program, shader);
}

GLAPI void APIENTRY glBeginQuery(GLenum target, GLuint id)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[460];
   ((void (APIENTRY *)(GLenum target, GLuint id)) _func)(target, id);
}

GLAPI void APIENTRY glBeginTransformFeedback(GLenum primitiveMode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[571];
   ((void (APIENTRY *)(GLenum primitiveMode)) _func)(primitiveMode);
}

GLAPI void APIENTRY glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[480];
   ((void (APIENTRY *)(GLuint program, GLuint index, const GLchar *name)) _func)(program, index, name);
}

GLAPI void APIENTRY glBindBuffer(GLenum target, GLuint buffer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[461];
   ((void (APIENTRY *)(GLenum target, GLuint buffer)) _func)(target, buffer);
}

GLAPI void APIENTRY glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[572];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLuint buffer)) _func)(target, index, buffer);
}

GLAPI void APIENTRY glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[573];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)) _func)(target, index, buffer, offset, size);
}

GLAPI void APIENTRY glBindFramebuffer(GLenum target, GLuint framebuffer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[661];
   ((void (APIENTRY *)(GLenum target, GLuint framebuffer)) _func)(target, framebuffer);
}

GLAPI void APIENTRY glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[868];
   ((void (APIENTRY *)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)) _func)(unit, texture, level, layered, layer, access, format);
}

GLAPI void APIENTRY glBindProgramPipeline(GLuint pipeline)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1099];
   ((void (APIENTRY *)(GLuint pipeline)) _func)(pipeline);
}

GLAPI void APIENTRY glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[662];
   ((void (APIENTRY *)(GLenum target, GLuint renderbuffer)) _func)(target, renderbuffer);
}

GLAPI void APIENTRY glBindSampler(GLuint unit, GLuint sampler)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[717];
   ((void (APIENTRY *)(GLuint unit, GLuint sampler)) _func)(unit, sampler);
}

GLAPI void APIENTRY glBindTexture(GLenum target, GLuint texture)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[307];
   ((void (APIENTRY *)(GLenum target, GLuint texture)) _func)(target, texture);
}

GLAPI void APIENTRY glBindTransformFeedback(GLenum target, GLuint id)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[802];
   ((void (APIENTRY *)(GLenum target, GLuint id)) _func)(target, id);
}

GLAPI void APIENTRY glBindVertexArray(GLuint array)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[683];
   ((void (APIENTRY *)(GLuint array)) _func)(array);
}

GLAPI void APIENTRY glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[882];
   ((void (APIENTRY *)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)) _func)(bindingindex, buffer, offset, stride);
}

GLAPI void APIENTRY glBlendBarrier(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1418];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[336];
   ((void (APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glBlendEquation(GLenum mode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[337];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[481];
   ((void (APIENTRY *)(GLenum modeRGB, GLenum modeAlpha)) _func)(modeRGB, modeAlpha);
}

GLAPI void APIENTRY glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[711];
   ((void (APIENTRY *)(GLuint buf, GLenum modeRGB, GLenum modeAlpha)) _func)(buf, modeRGB, modeAlpha);
}

GLAPI void APIENTRY glBlendEquationi(GLuint buf, GLenum mode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[712];
   ((void (APIENTRY *)(GLuint buf, GLenum mode)) _func)(buf, mode);
}

GLAPI void APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[241];
   ((void (APIENTRY *)(GLenum sfactor, GLenum dfactor)) _func)(sfactor, dfactor);
}

GLAPI void APIENTRY glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[420];
   ((void (APIENTRY *)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)) _func)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

GLAPI void APIENTRY glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[713];
   ((void (APIENTRY *)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)) _func)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

GLAPI void APIENTRY glBlendFunci(GLuint buf, GLenum src, GLenum dst)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[714];
   ((void (APIENTRY *)(GLuint buf, GLenum src, GLenum dst)) _func)(buf, src, dst);
}

GLAPI void APIENTRY glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[663];
   ((void (APIENTRY *)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)) _func)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

GLAPI void APIENTRY glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[462];
   ((void (APIENTRY *)(GLenum target, GLsizeiptr size, const void *data, GLenum usage)) _func)(target, size, data, usage);
}

GLAPI void APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[463];
   ((void (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)) _func)(target, offset, size, data);
}

GLAPI GLenum APIENTRY glCheckFramebufferStatus(GLenum target)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[664];
   return ((GLenum (APIENTRY *)(GLenum target)) _func)(target);
}

GLAPI void APIENTRY glClear(GLbitfield mask)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[203];
   ((void (APIENTRY *)(GLbitfield mask)) _func)(mask);
}

GLAPI void APIENTRY glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[576];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)) _func)(buffer, drawbuffer, depth, stencil);
}

GLAPI void APIENTRY glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[577];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLfloat *value)) _func)(buffer, drawbuffer, value);
}

GLAPI void APIENTRY glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[578];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLint *value)) _func)(buffer, drawbuffer, value);
}

GLAPI void APIENTRY glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[579];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLuint *value)) _func)(buffer, drawbuffer, value);
}

GLAPI void APIENTRY glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[206];
   ((void (APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glClearDepthf(GLfloat d)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[813];
   ((void (APIENTRY *)(GLfloat d)) _func)(d);
}

GLAPI void APIENTRY glClearStencil(GLint s)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[207];
   ((void (APIENTRY *)(GLint s)) _func)(s);
}

GLAPI GLenum APIENTRY glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[695];
   return ((GLenum (APIENTRY *)(GLsync sync, GLbitfield flags, GLuint64 timeout)) _func)(sync, flags, timeout);
}

GLAPI void APIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[210];
   ((void (APIENTRY *)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[580];
   ((void (APIENTRY *)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)) _func)(index, r, g, b, a);
}

GLAPI void APIENTRY glCompileShader(GLuint shader)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[482];
   ((void (APIENTRY *)(GLuint shader)) _func)(shader);
}

GLAPI void APIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[409];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)) _func)(target, level, internalformat, width, height, border, imageSize, data);
}

GLAPI void APIENTRY glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[410];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)) _func)(target, level, internalformat, width, height, depth, border, imageSize, data);
}

GLAPI void APIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[412];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)) _func)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

GLAPI void APIENTRY glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[413];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)) _func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

GLAPI void APIENTRY glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[694];
   ((void (APIENTRY *)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)) _func)(readTarget, writeTarget, readOffset, writeOffset, size);
}

GLAPI void APIENTRY glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[880];
   ((void (APIENTRY *)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)) _func)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

GLAPI void APIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[324];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)) _func)(target, level, internalformat, x, y, width, height, border);
}

GLAPI void APIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[326];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, level, xoffset, yoffset, x, y, width, height);
}

GLAPI void APIENTRY glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[373];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

GLAPI GLuint APIENTRY glCreateProgram(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[483];
   return ((GLuint (APIENTRY *)(void)) _func)();
}

GLAPI GLuint APIENTRY glCreateShader(GLenum type)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[484];
   return ((GLuint (APIENTRY *)(GLenum type)) _func)(type);
}

GLAPI GLuint APIENTRY glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const *strings)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1100];
   return ((GLuint (APIENTRY *)(GLenum type, GLsizei count, const GLchar *const *strings)) _func)(type, count, strings);
}

GLAPI void APIENTRY glCullFace(GLenum mode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[152];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1161];
   ((void (APIENTRY *)(GLDEBUGPROC callback, const void *userParam)) _func)(callback, userParam);
}

GLAPI void APIENTRY glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1162];
   ((void (APIENTRY *)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)) _func)(source, type, severity, count, ids, enabled);
}

GLAPI void APIENTRY glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1163];
   ((void (APIENTRY *)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)) _func)(source, type, id, severity, length, buf);
}

GLAPI void APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[464];
   ((void (APIENTRY *)(GLsizei n, const GLuint *buffers)) _func)(n, buffers);
}

GLAPI void APIENTRY glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[665];
   ((void (APIENTRY *)(GLsizei n, const GLuint *framebuffers)) _func)(n, framebuffers);
}

GLAPI void APIENTRY glDeleteProgram(GLuint program)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[485];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

GLAPI void APIENTRY glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1101];
   ((void (APIENTRY *)(GLsizei n, const GLuint *pipelines)) _func)(n, pipelines);
}

GLAPI void APIENTRY glDeleteQueries(GLsizei n, const GLuint *ids)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[465];
   ((void (APIENTRY *)(GLsizei n, const GLuint *ids)) _func)(n, ids);
}

GLAPI void APIENTRY glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[666];
   ((void (APIENTRY *)(GLsizei n, const GLuint *renderbuffers)) _func)(n, renderbuffers);
}

GLAPI void APIENTRY glDeleteSamplers(GLsizei count, const GLuint *samplers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[718];
   ((void (APIENTRY *)(GLsizei count, const GLuint *samplers)) _func)(count, samplers);
}

GLAPI void APIENTRY glDeleteShader(GLuint shader)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[486];
   ((void (APIENTRY *)(GLuint shader)) _func)(shader);
}

GLAPI void APIENTRY glDeleteSync(GLsync sync)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[696];
   ((void (APIENTRY *)(GLsync sync)) _func)(sync);
}

GLAPI void APIENTRY glDeleteTextures(GLsizei n, const GLuint *textures)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[327];
   ((void (APIENTRY *)(GLsizei n, const GLuint *textures)) _func)(n, textures);
}

GLAPI void APIENTRY glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[803];
   ((void (APIENTRY *)(GLsizei n, const GLuint *ids)) _func)(n, ids);
}

GLAPI void APIENTRY glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[684];
   ((void (APIENTRY *)(GLsizei n, const GLuint *arrays)) _func)(n, arrays);
}

GLAPI void APIENTRY glDepthFunc(GLenum func)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[245];
   ((void (APIENTRY *)(GLenum func)) _func)(func);
}

GLAPI void APIENTRY glDepthMask(GLboolean flag)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[211];
   ((void (APIENTRY *)(GLboolean flag)) _func)(flag);
}

GLAPI void APIENTRY glDepthRangef(GLfloat n, GLfloat f)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[814];
   ((void (APIENTRY *)(GLfloat n, GLfloat f)) _func)(n, f);
}

GLAPI void APIENTRY glDetachShader(GLuint program, GLuint shader)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[487];
   ((void (APIENTRY *)(GLuint program, GLuint shader)) _func)(program, shader);
}

GLAPI void APIENTRY glDisable(GLenum cap)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[214];
   ((void (APIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI void APIENTRY glDisableVertexAttribArray(GLuint index)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[488];
   ((void (APIENTRY *)(GLuint index)) _func)(index);
}

GLAPI void APIENTRY glDisablei(GLenum target, GLuint index)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[581];
   ((void (APIENTRY *)(GLenum target, GLuint index)) _func)(target, index);
}

GLAPI void APIENTRY glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[878];
   ((void (APIENTRY *)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)) _func)(num_groups_x, num_groups_y, num_groups_z);
}

GLAPI void APIENTRY glDispatchComputeIndirect(GLintptr indirect)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[879];
   ((void (APIENTRY *)(GLintptr indirect)) _func)(indirect);
}

GLAPI void APIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[310];
   ((void (APIENTRY *)(GLenum mode, GLint first, GLsizei count)) _func)(mode, first, count);
}

GLAPI void APIENTRY glDrawArraysIndirect(GLenum mode, const void *indirect)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[772];
   ((void (APIENTRY *)(GLenum mode, const void *indirect)) _func)(mode, indirect);
}

GLAPI void APIENTRY glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[659];
   ((void (APIENTRY *)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)) _func)(mode, first, count, instancecount);
}

GLAPI void APIENTRY glDrawBuffers(GLsizei n, const GLenum *bufs)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[489];
   ((void (APIENTRY *)(GLsizei n, const GLenum *bufs)) _func)(n, bufs);
}

GLAPI void APIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[311];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void *indices)) _func)(mode, count, type, indices);
}

GLAPI void APIENTRY glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[702];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)) _func)(mode, count, type, indices, basevertex);
}

GLAPI void APIENTRY glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[773];
   ((void (APIENTRY *)(GLenum mode, GLenum type, const void *indirect)) _func)(mode, type, indirect);
}

GLAPI void APIENTRY glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[660];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)) _func)(mode, count, type, indices, instancecount);
}

GLAPI void APIENTRY glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[703];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)) _func)(mode, count, type, indices, instancecount, basevertex);
}

GLAPI void APIENTRY glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[338];
   ((void (APIENTRY *)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)) _func)(mode, start, end, count, type, indices);
}

GLAPI void APIENTRY glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[704];
   ((void (APIENTRY *)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)) _func)(mode, start, end, count, type, indices, basevertex);
}

GLAPI void APIENTRY glEnable(GLenum cap)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[215];
   ((void (APIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI void APIENTRY glEnableVertexAttribArray(GLuint index)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[490];
   ((void (APIENTRY *)(GLuint index)) _func)(index);
}

GLAPI void APIENTRY glEnablei(GLenum target, GLuint index)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[582];
   ((void (APIENTRY *)(GLenum target, GLuint index)) _func)(target, index);
}

GLAPI void APIENTRY glEndQuery(GLenum target)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[466];
   ((void (APIENTRY *)(GLenum target)) _func)(target);
}

GLAPI void APIENTRY glEndTransformFeedback(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[584];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI GLsync APIENTRY glFenceSync(GLenum condition, GLbitfield flags)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[697];
   return ((GLsync (APIENTRY *)(GLenum condition, GLbitfield flags)) _func)(condition, flags);
}

GLAPI void APIENTRY glFinish(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[216];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glFlush(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[217];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[681];
   ((void (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr length)) _func)(target, offset, length);
}

GLAPI void APIENTRY glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[888];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[667];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)) _func)(target, attachment, renderbuffertarget, renderbuffer);
}

GLAPI void APIENTRY glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[616];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level)) _func)(target, attachment, texture, level);
}

GLAPI void APIENTRY glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[669];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)) _func)(target, attachment, textarget, texture, level);
}

GLAPI void APIENTRY glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[671];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)) _func)(target, attachment, texture, level, layer);
}

GLAPI void APIENTRY glFrontFace(GLenum mode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[157];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glGenBuffers(GLsizei n, GLuint *buffers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[467];
   ((void (APIENTRY *)(GLsizei n, GLuint *buffers)) _func)(n, buffers);
}

GLAPI void APIENTRY glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[672];
   ((void (APIENTRY *)(GLsizei n, GLuint *framebuffers)) _func)(n, framebuffers);
}

GLAPI void APIENTRY glGenProgramPipelines(GLsizei n, GLuint *pipelines)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1102];
   ((void (APIENTRY *)(GLsizei n, GLuint *pipelines)) _func)(n, pipelines);
}

GLAPI void APIENTRY glGenQueries(GLsizei n, GLuint *ids)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[468];
   ((void (APIENTRY *)(GLsizei n, GLuint *ids)) _func)(n, ids);
}

GLAPI void APIENTRY glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[673];
   ((void (APIENTRY *)(GLsizei n, GLuint *renderbuffers)) _func)(n, renderbuffers);
}

GLAPI void APIENTRY glGenSamplers(GLsizei count, GLuint *samplers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[719];
   ((void (APIENTRY *)(GLsizei count, GLuint *samplers)) _func)(count, samplers);
}

GLAPI void APIENTRY glGenTextures(GLsizei n, GLuint *textures)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[328];
   ((void (APIENTRY *)(GLsizei n, GLuint *textures)) _func)(n, textures);
}

GLAPI void APIENTRY glGenTransformFeedbacks(GLsizei n, GLuint *ids)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[805];
   ((void (APIENTRY *)(GLsizei n, GLuint *ids)) _func)(n, ids);
}

GLAPI void APIENTRY glGenVertexArrays(GLsizei n, GLuint *arrays)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[685];
   ((void (APIENTRY *)(GLsizei n, GLuint *arrays)) _func)(n, arrays);
}

GLAPI void APIENTRY glGenerateMipmap(GLenum target)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[674];
   ((void (APIENTRY *)(GLenum target)) _func)(target);
}

GLAPI void APIENTRY glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[491];
   ((void (APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

GLAPI void APIENTRY glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[492];
   ((void (APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

GLAPI void APIENTRY glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[687];
   ((void (APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)) _func)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

GLAPI void APIENTRY glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[688];
   ((void (APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)) _func)(program, uniformBlockIndex, pname, params);
}

GLAPI void APIENTRY glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[690];
   ((void (APIENTRY *)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)) _func)(program, uniformCount, uniformIndices, pname, params);
}

GLAPI void APIENTRY glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[493];
   ((void (APIENTRY *)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)) _func)(program, maxCount, count, shaders);
}

GLAPI GLint APIENTRY glGetAttribLocation(GLuint program, const GLchar *name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[494];
   return ((GLint (APIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

GLAPI void APIENTRY glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[585];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLboolean *data)) _func)(target, index, data);
}

GLAPI void APIENTRY glGetBooleanv(GLenum pname, GLboolean *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[258];
   ((void (APIENTRY *)(GLenum pname, GLboolean *data)) _func)(pname, data);
}

GLAPI void APIENTRY glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[617];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint64 *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[469];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetBufferPointerv(GLenum target, GLenum pname, void **params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[470];
   ((void (APIENTRY *)(GLenum target, GLenum pname, void **params)) _func)(target, pname, params);
}

GLAPI GLuint APIENTRY glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1164];
   return ((GLuint (APIENTRY *)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)) _func)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}

GLAPI GLenum APIENTRY glGetError(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[261];
   return ((GLenum (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glGetFloatv(GLenum pname, GLfloat *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[262];
   ((void (APIENTRY *)(GLenum pname, GLfloat *data)) _func)(pname, data);
}

GLAPI GLint APIENTRY glGetFragDataLocation(GLuint program, const GLchar *name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[586];
   return ((GLint (APIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[675];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum pname, GLint *params)) _func)(target, attachment, pname, params);
}

GLAPI void APIENTRY glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[889];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI GLenum APIENTRY glGetGraphicsResetStatus(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[841];
   return ((GLenum (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[618];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLint64 *data)) _func)(target, index, data);
}

GLAPI void APIENTRY glGetInteger64v(GLenum pname, GLint64 *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[698];
   ((void (APIENTRY *)(GLenum pname, GLint64 *data)) _func)(pname, data);
}

GLAPI void APIENTRY glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[587];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLint *data)) _func)(target, index, data);
}

GLAPI void APIENTRY glGetIntegerv(GLenum pname, GLint *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[263];
   ((void (APIENTRY *)(GLenum pname, GLint *data)) _func)(pname, data);
}

GLAPI void APIENTRY glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[866];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)) _func)(target, internalformat, pname, bufSize, params);
}

GLAPI void APIENTRY glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[707];
   ((void (APIENTRY *)(GLenum pname, GLuint index, GLfloat *val)) _func)(pname, index, val);
}

GLAPI void APIENTRY glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1165];
   ((void (APIENTRY *)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)) _func)(identifier, name, bufSize, length, label);
}

GLAPI void APIENTRY glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1166];
   ((void (APIENTRY *)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)) _func)(ptr, bufSize, length, label);
}

GLAPI void APIENTRY glGetPointerv(GLenum pname, void **params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[329];
   ((void (APIENTRY *)(GLenum pname, void **params)) _func)(pname, params);
}

GLAPI void APIENTRY glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[818];
   ((void (APIENTRY *)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)) _func)(program, bufSize, length, binaryFormat, binary);
}

GLAPI void APIENTRY glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[495];
   ((void (APIENTRY *)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)) _func)(program, bufSize, length, infoLog);
}

GLAPI void APIENTRY glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[893];
   ((void (APIENTRY *)(GLuint program, GLenum programInterface, GLenum pname, GLint *params)) _func)(program, programInterface, pname, params);
}

GLAPI void APIENTRY glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1103];
   ((void (APIENTRY *)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)) _func)(pipeline, bufSize, length, infoLog);
}

GLAPI void APIENTRY glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1104];
   ((void (APIENTRY *)(GLuint pipeline, GLenum pname, GLint *params)) _func)(pipeline, pname, params);
}

GLAPI GLuint APIENTRY glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[894];
   return ((GLuint (APIENTRY *)(GLuint program, GLenum programInterface, const GLchar *name)) _func)(program, programInterface, name);
}

GLAPI GLint APIENTRY glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[895];
   return ((GLint (APIENTRY *)(GLuint program, GLenum programInterface, const GLchar *name)) _func)(program, programInterface, name);
}

GLAPI void APIENTRY glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[897];
   ((void (APIENTRY *)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)) _func)(program, programInterface, index, bufSize, length, name);
}

GLAPI void APIENTRY glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[898];
   ((void (APIENTRY *)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)) _func)(program, programInterface, index, propCount, props, bufSize, length, params);
}

GLAPI void APIENTRY glGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[496];
   ((void (APIENTRY *)(GLuint program, GLenum pname, GLint *params)) _func)(program, pname, params);
}

GLAPI void APIENTRY glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[473];
   ((void (APIENTRY *)(GLuint id, GLenum pname, GLuint *params)) _func)(id, pname, params);
}

GLAPI void APIENTRY glGetQueryiv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[474];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[676];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[720];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLint *params)) _func)(sampler, pname, params);
}

GLAPI void APIENTRY glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[721];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLuint *params)) _func)(sampler, pname, params);
}

GLAPI void APIENTRY glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[722];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLfloat *params)) _func)(sampler, pname, params);
}

GLAPI void APIENTRY glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[723];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLint *params)) _func)(sampler, pname, params);
}

GLAPI void APIENTRY glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[497];
   ((void (APIENTRY *)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)) _func)(shader, bufSize, length, infoLog);
}

GLAPI void APIENTRY glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[815];
   ((void (APIENTRY *)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)) _func)(shadertype, precisiontype, range, precision);
}

GLAPI void APIENTRY glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[498];
   ((void (APIENTRY *)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)) _func)(shader, bufSize, length, source);
}

GLAPI void APIENTRY glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[499];
   ((void (APIENTRY *)(GLuint shader, GLenum pname, GLint *params)) _func)(shader, pname, params);
}

GLAPI const GLubyte * APIENTRY glGetString(GLenum name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[275];
   return ((const GLubyte * (APIENTRY *)(GLenum name)) _func)(name);
}

GLAPI const GLubyte * APIENTRY glGetStringi(GLenum name, GLuint index)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[588];
   return ((const GLubyte * (APIENTRY *)(GLenum name, GLuint index)) _func)(name, index);
}

GLAPI void APIENTRY glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[699];
   ((void (APIENTRY *)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)) _func)(sync, pname, bufSize, length, values);
}

GLAPI void APIENTRY glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[284];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum pname, GLfloat *params)) _func)(target, level, pname, params);
}

GLAPI void APIENTRY glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[285];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum pname, GLint *params)) _func)(target, level, pname, params);
}

GLAPI void APIENTRY glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[589];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[590];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLuint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[282];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[283];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[591];
   ((void (APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

GLAPI GLuint APIENTRY glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[691];
   return ((GLuint (APIENTRY *)(GLuint program, const GLchar *uniformBlockName)) _func)(program, uniformBlockName);
}

GLAPI void APIENTRY glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const *uniformNames, GLuint *uniformIndices)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[692];
   ((void (APIENTRY *)(GLuint program, GLsizei uniformCount, const GLchar *const *uniformNames, GLuint *uniformIndices)) _func)(program, uniformCount, uniformNames, uniformIndices);
}

GLAPI GLint APIENTRY glGetUniformLocation(GLuint program, const GLchar *name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[500];
   return ((GLint (APIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

GLAPI void APIENTRY glGetUniformfv(GLuint program, GLint location, GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[501];
   ((void (APIENTRY *)(GLuint program, GLint location, GLfloat *params)) _func)(program, location, params);
}

GLAPI void APIENTRY glGetUniformiv(GLuint program, GLint location, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[502];
   ((void (APIENTRY *)(GLuint program, GLint location, GLint *params)) _func)(program, location, params);
}

GLAPI void APIENTRY glGetUniformuiv(GLuint program, GLint location, GLuint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[592];
   ((void (APIENTRY *)(GLuint program, GLint location, GLuint *params)) _func)(program, location, params);
}

GLAPI void APIENTRY glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[593];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLint *params)) _func)(index, pname, params);
}

GLAPI void APIENTRY glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[594];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLuint *params)) _func)(index, pname, params);
}

GLAPI void APIENTRY glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[503];
   ((void (APIENTRY *)(GLuint index, GLenum pname, void **pointer)) _func)(index, pname, pointer);
}

GLAPI void APIENTRY glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[505];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLfloat *params)) _func)(index, pname, params);
}

GLAPI void APIENTRY glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[506];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLint *params)) _func)(index, pname, params);
}

GLAPI void APIENTRY glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[857];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)) _func)(program, location, bufSize, params);
}

GLAPI void APIENTRY glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[858];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLint *params)) _func)(program, location, bufSize, params);
}

GLAPI void APIENTRY glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[859];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLuint *params)) _func)(program, location, bufSize, params);
}

GLAPI void APIENTRY glHint(GLenum target, GLenum mode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[158];
   ((void (APIENTRY *)(GLenum target, GLenum mode)) _func)(target, mode);
}

GLAPI void APIENTRY glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1075];
   ((void (APIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum *attachments)) _func)(target, numAttachments, attachments);
}

GLAPI void APIENTRY glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1076];
   ((void (APIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, numAttachments, attachments, x, y, width, height);
}

GLAPI GLboolean APIENTRY glIsBuffer(GLuint buffer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[475];
   return ((GLboolean (APIENTRY *)(GLuint buffer)) _func)(buffer);
}

GLAPI GLboolean APIENTRY glIsEnabled(GLenum cap)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[286];
   return ((GLboolean (APIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI GLboolean APIENTRY glIsEnabledi(GLenum target, GLuint index)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[595];
   return ((GLboolean (APIENTRY *)(GLenum target, GLuint index)) _func)(target, index);
}

GLAPI GLboolean APIENTRY glIsFramebuffer(GLuint framebuffer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[677];
   return ((GLboolean (APIENTRY *)(GLuint framebuffer)) _func)(framebuffer);
}

GLAPI GLboolean APIENTRY glIsProgram(GLuint program)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[507];
   return ((GLboolean (APIENTRY *)(GLuint program)) _func)(program);
}

GLAPI GLboolean APIENTRY glIsProgramPipeline(GLuint pipeline)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1105];
   return ((GLboolean (APIENTRY *)(GLuint pipeline)) _func)(pipeline);
}

GLAPI GLboolean APIENTRY glIsQuery(GLuint id)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[476];
   return ((GLboolean (APIENTRY *)(GLuint id)) _func)(id);
}

GLAPI GLboolean APIENTRY glIsRenderbuffer(GLuint renderbuffer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[678];
   return ((GLboolean (APIENTRY *)(GLuint renderbuffer)) _func)(renderbuffer);
}

GLAPI GLboolean APIENTRY glIsSampler(GLuint sampler)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[724];
   return ((GLboolean (APIENTRY *)(GLuint sampler)) _func)(sampler);
}

GLAPI GLboolean APIENTRY glIsShader(GLuint shader)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[508];
   return ((GLboolean (APIENTRY *)(GLuint shader)) _func)(shader);
}

GLAPI GLboolean APIENTRY glIsSync(GLsync sync)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[700];
   return ((GLboolean (APIENTRY *)(GLsync sync)) _func)(sync);
}

GLAPI GLboolean APIENTRY glIsTexture(GLuint texture)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[330];
   return ((GLboolean (APIENTRY *)(GLuint texture)) _func)(texture);
}

GLAPI GLboolean APIENTRY glIsTransformFeedback(GLuint id)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[806];
   return ((GLboolean (APIENTRY *)(GLuint id)) _func)(id);
}

GLAPI GLboolean APIENTRY glIsVertexArray(GLuint array)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[686];
   return ((GLboolean (APIENTRY *)(GLuint array)) _func)(array);
}

GLAPI void APIENTRY glLineWidth(GLfloat width)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[168];
   ((void (APIENTRY *)(GLfloat width)) _func)(width);
}

GLAPI void APIENTRY glLinkProgram(GLuint program)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[509];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

GLAPI void * APIENTRY glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[682];
   return ((void * (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)) _func)(target, offset, length, access);
}

GLAPI void APIENTRY glMemoryBarrier(GLbitfield barriers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[869];
   ((void (APIENTRY *)(GLbitfield barriers)) _func)(barriers);
}

GLAPI void APIENTRY glMemoryBarrierByRegion(GLbitfield barriers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[621];
   ((void (APIENTRY *)(GLbitfield barriers)) _func)(barriers);
}

GLAPI void APIENTRY glMinSampleShading(GLfloat value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[620];
   ((void (APIENTRY *)(GLfloat value)) _func)(value);
}

GLAPI void APIENTRY glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1167];
   ((void (APIENTRY *)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)) _func)(identifier, name, length, label);
}

GLAPI void APIENTRY glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1168];
   ((void (APIENTRY *)(const void *ptr, GLsizei length, const GLchar *label)) _func)(ptr, length, label);
}

GLAPI void APIENTRY glPatchParameteri(GLenum pname, GLint value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[801];
   ((void (APIENTRY *)(GLenum pname, GLint value)) _func)(pname, value);
}

GLAPI void APIENTRY glPauseTransformFeedback(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[807];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glPixelStorei(GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[250];
   ((void (APIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

GLAPI void APIENTRY glPolygonOffset(GLfloat factor, GLfloat units)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[319];
   ((void (APIENTRY *)(GLfloat factor, GLfloat units)) _func)(factor, units);
}

GLAPI void APIENTRY glPopDebugGroup(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1169];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1419];
   ((void (APIENTRY *)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)) _func)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}

GLAPI void APIENTRY glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[819];
   ((void (APIENTRY *)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)) _func)(program, binaryFormat, binary, length);
}

GLAPI void APIENTRY glProgramParameteri(GLuint program, GLenum pname, GLint value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[820];
   ((void (APIENTRY *)(GLuint program, GLenum pname, GLint value)) _func)(program, pname, value);
}

GLAPI void APIENTRY glProgramUniform1f(GLuint program, GLint location, GLfloat v0)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1109];
   ((void (APIENTRY *)(GLuint program, GLint location, GLfloat v0)) _func)(program, location, v0);
}

GLAPI void APIENTRY glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1110];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniform1i(GLuint program, GLint location, GLint v0)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1111];
   ((void (APIENTRY *)(GLuint program, GLint location, GLint v0)) _func)(program, location, v0);
}

GLAPI void APIENTRY glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1112];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1113];
   ((void (APIENTRY *)(GLuint program, GLint location, GLuint v0)) _func)(program, location, v0);
}

GLAPI void APIENTRY glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1114];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1117];
   ((void (APIENTRY *)(GLuint program, GLint location, GLfloat v0, GLfloat v1)) _func)(program, location, v0, v1);
}

GLAPI void APIENTRY glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1118];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1119];
   ((void (APIENTRY *)(GLuint program, GLint location, GLint v0, GLint v1)) _func)(program, location, v0, v1);
}

GLAPI void APIENTRY glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1120];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1121];
   ((void (APIENTRY *)(GLuint program, GLint location, GLuint v0, GLuint v1)) _func)(program, location, v0, v1);
}

GLAPI void APIENTRY glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1122];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1125];
   ((void (APIENTRY *)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)) _func)(program, location, v0, v1, v2);
}

GLAPI void APIENTRY glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1126];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1127];
   ((void (APIENTRY *)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)) _func)(program, location, v0, v1, v2);
}

GLAPI void APIENTRY glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1128];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1129];
   ((void (APIENTRY *)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)) _func)(program, location, v0, v1, v2);
}

GLAPI void APIENTRY glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1130];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1133];
   ((void (APIENTRY *)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)) _func)(program, location, v0, v1, v2, v3);
}

GLAPI void APIENTRY glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1134];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1135];
   ((void (APIENTRY *)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)) _func)(program, location, v0, v1, v2, v3);
}

GLAPI void APIENTRY glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1136];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1137];
   ((void (APIENTRY *)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)) _func)(program, location, v0, v1, v2, v3);
}

GLAPI void APIENTRY glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1138];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint *value)) _func)(program, location, count, value);
}

GLAPI void APIENTRY glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1140];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

GLAPI void APIENTRY glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1142];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

GLAPI void APIENTRY glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1144];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

GLAPI void APIENTRY glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1146];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

GLAPI void APIENTRY glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1148];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

GLAPI void APIENTRY glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1150];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

GLAPI void APIENTRY glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1152];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

GLAPI void APIENTRY glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1154];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

GLAPI void APIENTRY glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1156];
   ((void (APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

GLAPI void APIENTRY glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1170];
   ((void (APIENTRY *)(GLenum source, GLuint id, GLsizei length, const GLchar *message)) _func)(source, id, length, message);
}

GLAPI void APIENTRY glReadBuffer(GLenum src)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[254];
   ((void (APIENTRY *)(GLenum src)) _func)(src);
}

GLAPI void APIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[256];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)) _func)(x, y, width, height, format, type, pixels);
}

GLAPI void APIENTRY glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[860];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)) _func)(x, y, width, height, format, type, bufSize, data);
}

GLAPI void APIENTRY glReleaseShaderCompiler(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[816];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[679];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)) _func)(target, internalformat, width, height);
}

GLAPI void APIENTRY glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[680];
   ((void (APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)) _func)(target, samples, internalformat, width, height);
}

GLAPI void APIENTRY glResumeTransformFeedback(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[808];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glSampleCoverage(GLfloat value, GLboolean invert)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[419];
   ((void (APIENTRY *)(GLfloat value, GLboolean invert)) _func)(value, invert);
}

GLAPI void APIENTRY glSampleMaski(GLuint maskNumber, GLbitfield mask)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[708];
   ((void (APIENTRY *)(GLuint maskNumber, GLbitfield mask)) _func)(maskNumber, mask);
}

GLAPI void APIENTRY glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[725];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, const GLint *param)) _func)(sampler, pname, param);
}

GLAPI void APIENTRY glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[726];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, const GLuint *param)) _func)(sampler, pname, param);
}

GLAPI void APIENTRY glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[727];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLfloat param)) _func)(sampler, pname, param);
}

GLAPI void APIENTRY glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[728];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, const GLfloat *param)) _func)(sampler, pname, param);
}

GLAPI void APIENTRY glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[729];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLint param)) _func)(sampler, pname, param);
}

GLAPI void APIENTRY glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[730];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, const GLint *param)) _func)(sampler, pname, param);
}

GLAPI void APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[176];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}

GLAPI void APIENTRY glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[817];
   ((void (APIENTRY *)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)) _func)(count, shaders, binaryformat, binary, length);
}

GLAPI void APIENTRY glShaderSource(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[510];
   ((void (APIENTRY *)(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length)) _func)(shader, count, string, length);
}

GLAPI void APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[243];
   ((void (APIENTRY *)(GLenum func, GLint ref, GLuint mask)) _func)(func, ref, mask);
}

GLAPI void APIENTRY glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[511];
   ((void (APIENTRY *)(GLenum face, GLenum func, GLint ref, GLuint mask)) _func)(face, func, ref, mask);
}

GLAPI void APIENTRY glStencilMask(GLuint mask)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[209];
   ((void (APIENTRY *)(GLuint mask)) _func)(mask);
}

GLAPI void APIENTRY glStencilMaskSeparate(GLenum face, GLuint mask)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[512];
   ((void (APIENTRY *)(GLenum face, GLuint mask)) _func)(face, mask);
}

GLAPI void APIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[244];
   ((void (APIENTRY *)(GLenum fail, GLenum zfail, GLenum zpass)) _func)(fail, zfail, zpass);
}

GLAPI void APIENTRY glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[513];
   ((void (APIENTRY *)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)) _func)(face, sfail, dpfail, dppass);
}

GLAPI void APIENTRY glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[615];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLuint buffer)) _func)(target, internalformat, buffer);
}

GLAPI void APIENTRY glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[900];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)) _func)(target, internalformat, buffer, offset, size);
}

GLAPI void APIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[183];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)) _func)(target, level, internalformat, width, height, border, format, type, pixels);
}

GLAPI void APIENTRY glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[371];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)) _func)(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

GLAPI void APIENTRY glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[596];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[597];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLuint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[178];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[179];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[180];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[181];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[871];
   ((void (APIENTRY *)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)) _func)(target, levels, internalformat, width, height);
}

GLAPI void APIENTRY glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[901];
   ((void (APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)) _func)(target, samples, internalformat, width, height, fixedsamplelocations);
}

GLAPI void APIENTRY glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[872];
   ((void (APIENTRY *)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)) _func)(target, levels, internalformat, width, height, depth);
}

GLAPI void APIENTRY glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[902];
   ((void (APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)) _func)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

GLAPI void APIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[333];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)) _func)(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

GLAPI void APIENTRY glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[372];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)) _func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

GLAPI void APIENTRY glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[598];
   ((void (APIENTRY *)(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode)) _func)(program, count, varyings, bufferMode);
}

GLAPI void APIENTRY glUniform1f(GLint location, GLfloat v0)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[514];
   ((void (APIENTRY *)(GLint location, GLfloat v0)) _func)(location, v0);
}

GLAPI void APIENTRY glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[515];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform1i(GLint location, GLint v0)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[516];
   ((void (APIENTRY *)(GLint location, GLint v0)) _func)(location, v0);
}

GLAPI void APIENTRY glUniform1iv(GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[517];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform1ui(GLint location, GLuint v0)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[599];
   ((void (APIENTRY *)(GLint location, GLuint v0)) _func)(location, v0);
}

GLAPI void APIENTRY glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[600];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[518];
   ((void (APIENTRY *)(GLint location, GLfloat v0, GLfloat v1)) _func)(location, v0, v1);
}

GLAPI void APIENTRY glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[519];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform2i(GLint location, GLint v0, GLint v1)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[520];
   ((void (APIENTRY *)(GLint location, GLint v0, GLint v1)) _func)(location, v0, v1);
}

GLAPI void APIENTRY glUniform2iv(GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[521];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform2ui(GLint location, GLuint v0, GLuint v1)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[601];
   ((void (APIENTRY *)(GLint location, GLuint v0, GLuint v1)) _func)(location, v0, v1);
}

GLAPI void APIENTRY glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[602];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[522];
   ((void (APIENTRY *)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)) _func)(location, v0, v1, v2);
}

GLAPI void APIENTRY glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[523];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[524];
   ((void (APIENTRY *)(GLint location, GLint v0, GLint v1, GLint v2)) _func)(location, v0, v1, v2);
}

GLAPI void APIENTRY glUniform3iv(GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[525];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[603];
   ((void (APIENTRY *)(GLint location, GLuint v0, GLuint v1, GLuint v2)) _func)(location, v0, v1, v2);
}

GLAPI void APIENTRY glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[604];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[526];
   ((void (APIENTRY *)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)) _func)(location, v0, v1, v2, v3);
}

GLAPI void APIENTRY glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[527];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[528];
   ((void (APIENTRY *)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)) _func)(location, v0, v1, v2, v3);
}

GLAPI void APIENTRY glUniform4iv(GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[529];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[605];
   ((void (APIENTRY *)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)) _func)(location, v0, v1, v2, v3);
}

GLAPI void APIENTRY glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[606];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

GLAPI void APIENTRY glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[693];
   ((void (APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)) _func)(program, uniformBlockIndex, uniformBlockBinding);
}

GLAPI void APIENTRY glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[530];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[564];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[565];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[531];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[566];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[567];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[532];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[568];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI void APIENTRY glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[569];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

GLAPI GLboolean APIENTRY glUnmapBuffer(GLenum target)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[478];
   return ((GLboolean (APIENTRY *)(GLenum target)) _func)(target);
}

GLAPI void APIENTRY glUseProgram(GLuint program)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[533];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

GLAPI void APIENTRY glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1158];
   ((void (APIENTRY *)(GLuint pipeline, GLbitfield stages, GLuint program)) _func)(pipeline, stages, program);
}

GLAPI void APIENTRY glValidateProgram(GLuint program)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[534];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

GLAPI void APIENTRY glValidateProgramPipeline(GLuint pipeline)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1159];
   ((void (APIENTRY *)(GLuint pipeline)) _func)(pipeline);
}

GLAPI void APIENTRY glVertexAttrib1f(GLuint index, GLfloat x)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[641];
   ((void (APIENTRY *)(GLuint index, GLfloat x)) _func)(index, x);
}

GLAPI void APIENTRY glVertexAttrib1fv(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[642];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

GLAPI void APIENTRY glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[643];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y)) _func)(index, x, y);
}

GLAPI void APIENTRY glVertexAttrib2fv(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[644];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

GLAPI void APIENTRY glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[645];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z)) _func)(index, x, y, z);
}

GLAPI void APIENTRY glVertexAttrib3fv(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[646];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

GLAPI void APIENTRY glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[647];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(index, x, y, z, w);
}

GLAPI void APIENTRY glVertexAttrib4fv(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[648];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

GLAPI void APIENTRY glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[883];
   ((void (APIENTRY *)(GLuint attribindex, GLuint bindingindex)) _func)(attribindex, bindingindex);
}

GLAPI void APIENTRY glVertexAttribDivisor(GLuint index, GLuint divisor)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[619];
   ((void (APIENTRY *)(GLuint index, GLuint divisor)) _func)(index, divisor);
}

GLAPI void APIENTRY glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[884];
   ((void (APIENTRY *)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)) _func)(attribindex, size, type, normalized, relativeoffset);
}

GLAPI void APIENTRY glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1289];
   ((void (APIENTRY *)(GLuint index, GLint x, GLint y, GLint z, GLint w)) _func)(index, x, y, z, w);
}

GLAPI void APIENTRY glVertexAttribI4iv(GLuint index, const GLint *v)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1290];
   ((void (APIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

GLAPI void APIENTRY glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1291];
   ((void (APIENTRY *)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)) _func)(index, x, y, z, w);
}

GLAPI void APIENTRY glVertexAttribI4uiv(GLuint index, const GLuint *v)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1292];
   ((void (APIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

GLAPI void APIENTRY glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[885];
   ((void (APIENTRY *)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)) _func)(attribindex, size, type, relativeoffset);
}

GLAPI void APIENTRY glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[613];
   ((void (APIENTRY *)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)) _func)(index, size, type, stride, pointer);
}

GLAPI void APIENTRY glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[563];
   ((void (APIENTRY *)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)) _func)(index, size, type, normalized, stride, pointer);
}

GLAPI void APIENTRY glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[887];
   ((void (APIENTRY *)(GLuint bindingindex, GLuint divisor)) _func)(bindingindex, divisor);
}

GLAPI void APIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[305];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}

GLAPI void APIENTRY glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[701];
   ((void (APIENTRY *)(GLsync sync, GLbitfield flags, GLuint64 timeout)) _func)(sync, flags, timeout);
}


#endif /* MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN */

#ifdef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN
#undef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN
#endif /* MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN */

#ifdef MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN
__asm__(
STUB_ASM_ENTRY("glActiveShaderProgram")"\n"
"\t"STUB_ASM_CODE("1098")"\n"

STUB_ASM_ENTRY("glActiveTexture")"\n"
"\t"STUB_ASM_CODE("374")"\n"

STUB_ASM_ENTRY("glAttachShader")"\n"
"\t"STUB_ASM_CODE("479")"\n"

STUB_ASM_ENTRY("glBeginQuery")"\n"
"\t"STUB_ASM_CODE("460")"\n"

STUB_ASM_ENTRY("glBeginTransformFeedback")"\n"
"\t"STUB_ASM_CODE("571")"\n"

STUB_ASM_ENTRY("glBindAttribLocation")"\n"
"\t"STUB_ASM_CODE("480")"\n"

STUB_ASM_ENTRY("glBindBuffer")"\n"
"\t"STUB_ASM_CODE("461")"\n"

STUB_ASM_ENTRY("glBindBufferBase")"\n"
"\t"STUB_ASM_CODE("572")"\n"

STUB_ASM_ENTRY("glBindBufferRange")"\n"
"\t"STUB_ASM_CODE("573")"\n"

STUB_ASM_ENTRY("glBindFramebuffer")"\n"
"\t"STUB_ASM_CODE("661")"\n"

STUB_ASM_ENTRY("glBindImageTexture")"\n"
"\t"STUB_ASM_CODE("868")"\n"

STUB_ASM_ENTRY("glBindProgramPipeline")"\n"
"\t"STUB_ASM_CODE("1099")"\n"

STUB_ASM_ENTRY("glBindRenderbuffer")"\n"
"\t"STUB_ASM_CODE("662")"\n"

STUB_ASM_ENTRY("glBindSampler")"\n"
"\t"STUB_ASM_CODE("717")"\n"

STUB_ASM_ENTRY("glBindTexture")"\n"
"\t"STUB_ASM_CODE("307")"\n"

STUB_ASM_ENTRY("glBindTransformFeedback")"\n"
"\t"STUB_ASM_CODE("802")"\n"

STUB_ASM_ENTRY("glBindVertexArray")"\n"
"\t"STUB_ASM_CODE("683")"\n"

STUB_ASM_ENTRY("glBindVertexBuffer")"\n"
"\t"STUB_ASM_CODE("882")"\n"

STUB_ASM_ENTRY("glBlendBarrier")"\n"
"\t"STUB_ASM_CODE("1418")"\n"

STUB_ASM_ENTRY("glBlendColor")"\n"
"\t"STUB_ASM_CODE("336")"\n"

STUB_ASM_ENTRY("glBlendEquation")"\n"
"\t"STUB_ASM_CODE("337")"\n"

STUB_ASM_ENTRY("glBlendEquationSeparate")"\n"
"\t"STUB_ASM_CODE("481")"\n"

STUB_ASM_ENTRY("glBlendEquationSeparatei")"\n"
"\t"STUB_ASM_CODE("711")"\n"

STUB_ASM_ENTRY("glBlendEquationi")"\n"
"\t"STUB_ASM_CODE("712")"\n"

STUB_ASM_ENTRY("glBlendFunc")"\n"
"\t"STUB_ASM_CODE("241")"\n"

STUB_ASM_ENTRY("glBlendFuncSeparate")"\n"
"\t"STUB_ASM_CODE("420")"\n"

STUB_ASM_ENTRY("glBlendFuncSeparatei")"\n"
"\t"STUB_ASM_CODE("713")"\n"

STUB_ASM_ENTRY("glBlendFunci")"\n"
"\t"STUB_ASM_CODE("714")"\n"

STUB_ASM_ENTRY("glBlitFramebuffer")"\n"
"\t"STUB_ASM_CODE("663")"\n"

STUB_ASM_ENTRY("glBufferData")"\n"
"\t"STUB_ASM_CODE("462")"\n"

STUB_ASM_ENTRY("glBufferSubData")"\n"
"\t"STUB_ASM_CODE("463")"\n"

STUB_ASM_ENTRY("glCheckFramebufferStatus")"\n"
"\t"STUB_ASM_CODE("664")"\n"

STUB_ASM_ENTRY("glClear")"\n"
"\t"STUB_ASM_CODE("203")"\n"

STUB_ASM_ENTRY("glClearBufferfi")"\n"
"\t"STUB_ASM_CODE("576")"\n"

STUB_ASM_ENTRY("glClearBufferfv")"\n"
"\t"STUB_ASM_CODE("577")"\n"

STUB_ASM_ENTRY("glClearBufferiv")"\n"
"\t"STUB_ASM_CODE("578")"\n"

STUB_ASM_ENTRY("glClearBufferuiv")"\n"
"\t"STUB_ASM_CODE("579")"\n"

STUB_ASM_ENTRY("glClearColor")"\n"
"\t"STUB_ASM_CODE("206")"\n"

STUB_ASM_ENTRY("glClearDepthf")"\n"
"\t"STUB_ASM_CODE("813")"\n"

STUB_ASM_ENTRY("glClearStencil")"\n"
"\t"STUB_ASM_CODE("207")"\n"

STUB_ASM_ENTRY("glClientWaitSync")"\n"
"\t"STUB_ASM_CODE("695")"\n"

STUB_ASM_ENTRY("glColorMask")"\n"
"\t"STUB_ASM_CODE("210")"\n"

STUB_ASM_ENTRY("glColorMaski")"\n"
"\t"STUB_ASM_CODE("580")"\n"

STUB_ASM_ENTRY("glCompileShader")"\n"
"\t"STUB_ASM_CODE("482")"\n"

STUB_ASM_ENTRY("glCompressedTexImage2D")"\n"
"\t"STUB_ASM_CODE("409")"\n"

STUB_ASM_ENTRY("glCompressedTexImage3D")"\n"
"\t"STUB_ASM_CODE("410")"\n"

STUB_ASM_ENTRY("glCompressedTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("412")"\n"

STUB_ASM_ENTRY("glCompressedTexSubImage3D")"\n"
"\t"STUB_ASM_CODE("413")"\n"

STUB_ASM_ENTRY("glCopyBufferSubData")"\n"
"\t"STUB_ASM_CODE("694")"\n"

STUB_ASM_ENTRY("glCopyImageSubData")"\n"
"\t"STUB_ASM_CODE("880")"\n"

STUB_ASM_ENTRY("glCopyTexImage2D")"\n"
"\t"STUB_ASM_CODE("324")"\n"

STUB_ASM_ENTRY("glCopyTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("326")"\n"

STUB_ASM_ENTRY("glCopyTexSubImage3D")"\n"
"\t"STUB_ASM_CODE("373")"\n"

STUB_ASM_ENTRY("glCreateProgram")"\n"
"\t"STUB_ASM_CODE("483")"\n"

STUB_ASM_ENTRY("glCreateShader")"\n"
"\t"STUB_ASM_CODE("484")"\n"

STUB_ASM_ENTRY("glCreateShaderProgramv")"\n"
"\t"STUB_ASM_CODE("1100")"\n"

STUB_ASM_ENTRY("glCullFace")"\n"
"\t"STUB_ASM_CODE("152")"\n"

STUB_ASM_ENTRY("glDebugMessageCallback")"\n"
"\t"STUB_ASM_CODE("1161")"\n"

STUB_ASM_ENTRY("glDebugMessageControl")"\n"
"\t"STUB_ASM_CODE("1162")"\n"

STUB_ASM_ENTRY("glDebugMessageInsert")"\n"
"\t"STUB_ASM_CODE("1163")"\n"

STUB_ASM_ENTRY("glDeleteBuffers")"\n"
"\t"STUB_ASM_CODE("464")"\n"

STUB_ASM_ENTRY("glDeleteFramebuffers")"\n"
"\t"STUB_ASM_CODE("665")"\n"

STUB_ASM_ENTRY("glDeleteProgram")"\n"
"\t"STUB_ASM_CODE("485")"\n"

STUB_ASM_ENTRY("glDeleteProgramPipelines")"\n"
"\t"STUB_ASM_CODE("1101")"\n"

STUB_ASM_ENTRY("glDeleteQueries")"\n"
"\t"STUB_ASM_CODE("465")"\n"

STUB_ASM_ENTRY("glDeleteRenderbuffers")"\n"
"\t"STUB_ASM_CODE("666")"\n"

STUB_ASM_ENTRY("glDeleteSamplers")"\n"
"\t"STUB_ASM_CODE("718")"\n"

STUB_ASM_ENTRY("glDeleteShader")"\n"
"\t"STUB_ASM_CODE("486")"\n"

STUB_ASM_ENTRY("glDeleteSync")"\n"
"\t"STUB_ASM_CODE("696")"\n"

STUB_ASM_ENTRY("glDeleteTextures")"\n"
"\t"STUB_ASM_CODE("327")"\n"

STUB_ASM_ENTRY("glDeleteTransformFeedbacks")"\n"
"\t"STUB_ASM_CODE("803")"\n"

STUB_ASM_ENTRY("glDeleteVertexArrays")"\n"
"\t"STUB_ASM_CODE("684")"\n"

STUB_ASM_ENTRY("glDepthFunc")"\n"
"\t"STUB_ASM_CODE("245")"\n"

STUB_ASM_ENTRY("glDepthMask")"\n"
"\t"STUB_ASM_CODE("211")"\n"

STUB_ASM_ENTRY("glDepthRangef")"\n"
"\t"STUB_ASM_CODE("814")"\n"

STUB_ASM_ENTRY("glDetachShader")"\n"
"\t"STUB_ASM_CODE("487")"\n"

STUB_ASM_ENTRY("glDisable")"\n"
"\t"STUB_ASM_CODE("214")"\n"

STUB_ASM_ENTRY("glDisableVertexAttribArray")"\n"
"\t"STUB_ASM_CODE("488")"\n"

STUB_ASM_ENTRY("glDisablei")"\n"
"\t"STUB_ASM_CODE("581")"\n"

STUB_ASM_ENTRY("glDispatchCompute")"\n"
"\t"STUB_ASM_CODE("878")"\n"

STUB_ASM_ENTRY("glDispatchComputeIndirect")"\n"
"\t"STUB_ASM_CODE("879")"\n"

STUB_ASM_ENTRY("glDrawArrays")"\n"
"\t"STUB_ASM_CODE("310")"\n"

STUB_ASM_ENTRY("glDrawArraysIndirect")"\n"
"\t"STUB_ASM_CODE("772")"\n"

STUB_ASM_ENTRY("glDrawArraysInstanced")"\n"
"\t"STUB_ASM_CODE("659")"\n"

STUB_ASM_ENTRY("glDrawBuffers")"\n"
"\t"STUB_ASM_CODE("489")"\n"

STUB_ASM_ENTRY("glDrawElements")"\n"
"\t"STUB_ASM_CODE("311")"\n"

STUB_ASM_ENTRY("glDrawElementsBaseVertex")"\n"
"\t"STUB_ASM_CODE("702")"\n"

STUB_ASM_ENTRY("glDrawElementsIndirect")"\n"
"\t"STUB_ASM_CODE("773")"\n"

STUB_ASM_ENTRY("glDrawElementsInstanced")"\n"
"\t"STUB_ASM_CODE("660")"\n"

STUB_ASM_ENTRY("glDrawElementsInstancedBaseVertex")"\n"
"\t"STUB_ASM_CODE("703")"\n"

STUB_ASM_ENTRY("glDrawRangeElements")"\n"
"\t"STUB_ASM_CODE("338")"\n"

STUB_ASM_ENTRY("glDrawRangeElementsBaseVertex")"\n"
"\t"STUB_ASM_CODE("704")"\n"

STUB_ASM_ENTRY("glEnable")"\n"
"\t"STUB_ASM_CODE("215")"\n"

STUB_ASM_ENTRY("glEnableVertexAttribArray")"\n"
"\t"STUB_ASM_CODE("490")"\n"

STUB_ASM_ENTRY("glEnablei")"\n"
"\t"STUB_ASM_CODE("582")"\n"

STUB_ASM_ENTRY("glEndQuery")"\n"
"\t"STUB_ASM_CODE("466")"\n"

STUB_ASM_ENTRY("glEndTransformFeedback")"\n"
"\t"STUB_ASM_CODE("584")"\n"

STUB_ASM_ENTRY("glFenceSync")"\n"
"\t"STUB_ASM_CODE("697")"\n"

STUB_ASM_ENTRY("glFinish")"\n"
"\t"STUB_ASM_CODE("216")"\n"

STUB_ASM_ENTRY("glFlush")"\n"
"\t"STUB_ASM_CODE("217")"\n"

STUB_ASM_ENTRY("glFlushMappedBufferRange")"\n"
"\t"STUB_ASM_CODE("681")"\n"

STUB_ASM_ENTRY("glFramebufferParameteri")"\n"
"\t"STUB_ASM_CODE("888")"\n"

STUB_ASM_ENTRY("glFramebufferRenderbuffer")"\n"
"\t"STUB_ASM_CODE("667")"\n"

STUB_ASM_ENTRY("glFramebufferTexture")"\n"
"\t"STUB_ASM_CODE("616")"\n"

STUB_ASM_ENTRY("glFramebufferTexture2D")"\n"
"\t"STUB_ASM_CODE("669")"\n"

STUB_ASM_ENTRY("glFramebufferTextureLayer")"\n"
"\t"STUB_ASM_CODE("671")"\n"

STUB_ASM_ENTRY("glFrontFace")"\n"
"\t"STUB_ASM_CODE("157")"\n"

STUB_ASM_ENTRY("glGenBuffers")"\n"
"\t"STUB_ASM_CODE("467")"\n"

STUB_ASM_ENTRY("glGenFramebuffers")"\n"
"\t"STUB_ASM_CODE("672")"\n"

STUB_ASM_ENTRY("glGenProgramPipelines")"\n"
"\t"STUB_ASM_CODE("1102")"\n"

STUB_ASM_ENTRY("glGenQueries")"\n"
"\t"STUB_ASM_CODE("468")"\n"

STUB_ASM_ENTRY("glGenRenderbuffers")"\n"
"\t"STUB_ASM_CODE("673")"\n"

STUB_ASM_ENTRY("glGenSamplers")"\n"
"\t"STUB_ASM_CODE("719")"\n"

STUB_ASM_ENTRY("glGenTextures")"\n"
"\t"STUB_ASM_CODE("328")"\n"

STUB_ASM_ENTRY("glGenTransformFeedbacks")"\n"
"\t"STUB_ASM_CODE("805")"\n"

STUB_ASM_ENTRY("glGenVertexArrays")"\n"
"\t"STUB_ASM_CODE("685")"\n"

STUB_ASM_ENTRY("glGenerateMipmap")"\n"
"\t"STUB_ASM_CODE("674")"\n"

STUB_ASM_ENTRY("glGetActiveAttrib")"\n"
"\t"STUB_ASM_CODE("491")"\n"

STUB_ASM_ENTRY("glGetActiveUniform")"\n"
"\t"STUB_ASM_CODE("492")"\n"

STUB_ASM_ENTRY("glGetActiveUniformBlockName")"\n"
"\t"STUB_ASM_CODE("687")"\n"

STUB_ASM_ENTRY("glGetActiveUniformBlockiv")"\n"
"\t"STUB_ASM_CODE("688")"\n"

STUB_ASM_ENTRY("glGetActiveUniformsiv")"\n"
"\t"STUB_ASM_CODE("690")"\n"

STUB_ASM_ENTRY("glGetAttachedShaders")"\n"
"\t"STUB_ASM_CODE("493")"\n"

STUB_ASM_ENTRY("glGetAttribLocation")"\n"
"\t"STUB_ASM_CODE("494")"\n"

STUB_ASM_ENTRY("glGetBooleani_v")"\n"
"\t"STUB_ASM_CODE("585")"\n"

STUB_ASM_ENTRY("glGetBooleanv")"\n"
"\t"STUB_ASM_CODE("258")"\n"

STUB_ASM_ENTRY("glGetBufferParameteri64v")"\n"
"\t"STUB_ASM_CODE("617")"\n"

STUB_ASM_ENTRY("glGetBufferParameteriv")"\n"
"\t"STUB_ASM_CODE("469")"\n"

STUB_ASM_ENTRY("glGetBufferPointerv")"\n"
"\t"STUB_ASM_CODE("470")"\n"

STUB_ASM_ENTRY("glGetDebugMessageLog")"\n"
"\t"STUB_ASM_CODE("1164")"\n"

STUB_ASM_ENTRY("glGetError")"\n"
"\t"STUB_ASM_CODE("261")"\n"

STUB_ASM_ENTRY("glGetFloatv")"\n"
"\t"STUB_ASM_CODE("262")"\n"

STUB_ASM_ENTRY("glGetFragDataLocation")"\n"
"\t"STUB_ASM_CODE("586")"\n"

STUB_ASM_ENTRY("glGetFramebufferAttachmentParameteriv")"\n"
"\t"STUB_ASM_CODE("675")"\n"

STUB_ASM_ENTRY("glGetFramebufferParameteriv")"\n"
"\t"STUB_ASM_CODE("889")"\n"

STUB_ASM_ENTRY("glGetGraphicsResetStatus")"\n"
"\t"STUB_ASM_CODE("841")"\n"

STUB_ASM_ENTRY("glGetInteger64i_v")"\n"
"\t"STUB_ASM_CODE("618")"\n"

STUB_ASM_ENTRY("glGetInteger64v")"\n"
"\t"STUB_ASM_CODE("698")"\n"

STUB_ASM_ENTRY("glGetIntegeri_v")"\n"
"\t"STUB_ASM_CODE("587")"\n"

STUB_ASM_ENTRY("glGetIntegerv")"\n"
"\t"STUB_ASM_CODE("263")"\n"

STUB_ASM_ENTRY("glGetInternalformativ")"\n"
"\t"STUB_ASM_CODE("866")"\n"

STUB_ASM_ENTRY("glGetMultisamplefv")"\n"
"\t"STUB_ASM_CODE("707")"\n"

STUB_ASM_ENTRY("glGetObjectLabel")"\n"
"\t"STUB_ASM_CODE("1165")"\n"

STUB_ASM_ENTRY("glGetObjectPtrLabel")"\n"
"\t"STUB_ASM_CODE("1166")"\n"

STUB_ASM_ENTRY("glGetPointerv")"\n"
"\t"STUB_ASM_CODE("329")"\n"

STUB_ASM_ENTRY("glGetProgramBinary")"\n"
"\t"STUB_ASM_CODE("818")"\n"

STUB_ASM_ENTRY("glGetProgramInfoLog")"\n"
"\t"STUB_ASM_CODE("495")"\n"

STUB_ASM_ENTRY("glGetProgramInterfaceiv")"\n"
"\t"STUB_ASM_CODE("893")"\n"

STUB_ASM_ENTRY("glGetProgramPipelineInfoLog")"\n"
"\t"STUB_ASM_CODE("1103")"\n"

STUB_ASM_ENTRY("glGetProgramPipelineiv")"\n"
"\t"STUB_ASM_CODE("1104")"\n"

STUB_ASM_ENTRY("glGetProgramResourceIndex")"\n"
"\t"STUB_ASM_CODE("894")"\n"

STUB_ASM_ENTRY("glGetProgramResourceLocation")"\n"
"\t"STUB_ASM_CODE("895")"\n"

STUB_ASM_ENTRY("glGetProgramResourceName")"\n"
"\t"STUB_ASM_CODE("897")"\n"

STUB_ASM_ENTRY("glGetProgramResourceiv")"\n"
"\t"STUB_ASM_CODE("898")"\n"

STUB_ASM_ENTRY("glGetProgramiv")"\n"
"\t"STUB_ASM_CODE("496")"\n"

STUB_ASM_ENTRY("glGetQueryObjectuiv")"\n"
"\t"STUB_ASM_CODE("473")"\n"

STUB_ASM_ENTRY("glGetQueryiv")"\n"
"\t"STUB_ASM_CODE("474")"\n"

STUB_ASM_ENTRY("glGetRenderbufferParameteriv")"\n"
"\t"STUB_ASM_CODE("676")"\n"

STUB_ASM_ENTRY("glGetSamplerParameterIiv")"\n"
"\t"STUB_ASM_CODE("720")"\n"

STUB_ASM_ENTRY("glGetSamplerParameterIuiv")"\n"
"\t"STUB_ASM_CODE("721")"\n"

STUB_ASM_ENTRY("glGetSamplerParameterfv")"\n"
"\t"STUB_ASM_CODE("722")"\n"

STUB_ASM_ENTRY("glGetSamplerParameteriv")"\n"
"\t"STUB_ASM_CODE("723")"\n"

STUB_ASM_ENTRY("glGetShaderInfoLog")"\n"
"\t"STUB_ASM_CODE("497")"\n"

STUB_ASM_ENTRY("glGetShaderPrecisionFormat")"\n"
"\t"STUB_ASM_CODE("815")"\n"

STUB_ASM_ENTRY("glGetShaderSource")"\n"
"\t"STUB_ASM_CODE("498")"\n"

STUB_ASM_ENTRY("glGetShaderiv")"\n"
"\t"STUB_ASM_CODE("499")"\n"

STUB_ASM_ENTRY("glGetString")"\n"
"\t"STUB_ASM_CODE("275")"\n"

STUB_ASM_ENTRY("glGetStringi")"\n"
"\t"STUB_ASM_CODE("588")"\n"

STUB_ASM_ENTRY("glGetSynciv")"\n"
"\t"STUB_ASM_CODE("699")"\n"

STUB_ASM_ENTRY("glGetTexLevelParameterfv")"\n"
"\t"STUB_ASM_CODE("284")"\n"

STUB_ASM_ENTRY("glGetTexLevelParameteriv")"\n"
"\t"STUB_ASM_CODE("285")"\n"

STUB_ASM_ENTRY("glGetTexParameterIiv")"\n"
"\t"STUB_ASM_CODE("589")"\n"

STUB_ASM_ENTRY("glGetTexParameterIuiv")"\n"
"\t"STUB_ASM_CODE("590")"\n"

STUB_ASM_ENTRY("glGetTexParameterfv")"\n"
"\t"STUB_ASM_CODE("282")"\n"

STUB_ASM_ENTRY("glGetTexParameteriv")"\n"
"\t"STUB_ASM_CODE("283")"\n"

STUB_ASM_ENTRY("glGetTransformFeedbackVarying")"\n"
"\t"STUB_ASM_CODE("591")"\n"

STUB_ASM_ENTRY("glGetUniformBlockIndex")"\n"
"\t"STUB_ASM_CODE("691")"\n"

STUB_ASM_ENTRY("glGetUniformIndices")"\n"
"\t"STUB_ASM_CODE("692")"\n"

STUB_ASM_ENTRY("glGetUniformLocation")"\n"
"\t"STUB_ASM_CODE("500")"\n"

STUB_ASM_ENTRY("glGetUniformfv")"\n"
"\t"STUB_ASM_CODE("501")"\n"

STUB_ASM_ENTRY("glGetUniformiv")"\n"
"\t"STUB_ASM_CODE("502")"\n"

STUB_ASM_ENTRY("glGetUniformuiv")"\n"
"\t"STUB_ASM_CODE("592")"\n"

STUB_ASM_ENTRY("glGetVertexAttribIiv")"\n"
"\t"STUB_ASM_CODE("593")"\n"

STUB_ASM_ENTRY("glGetVertexAttribIuiv")"\n"
"\t"STUB_ASM_CODE("594")"\n"

STUB_ASM_ENTRY("glGetVertexAttribPointerv")"\n"
"\t"STUB_ASM_CODE("503")"\n"

STUB_ASM_ENTRY("glGetVertexAttribfv")"\n"
"\t"STUB_ASM_CODE("505")"\n"

STUB_ASM_ENTRY("glGetVertexAttribiv")"\n"
"\t"STUB_ASM_CODE("506")"\n"

STUB_ASM_ENTRY("glGetnUniformfv")"\n"
"\t"STUB_ASM_CODE("857")"\n"

STUB_ASM_ENTRY("glGetnUniformiv")"\n"
"\t"STUB_ASM_CODE("858")"\n"

STUB_ASM_ENTRY("glGetnUniformuiv")"\n"
"\t"STUB_ASM_CODE("859")"\n"

STUB_ASM_ENTRY("glHint")"\n"
"\t"STUB_ASM_CODE("158")"\n"

STUB_ASM_ENTRY("glInvalidateFramebuffer")"\n"
"\t"STUB_ASM_CODE("1075")"\n"

STUB_ASM_ENTRY("glInvalidateSubFramebuffer")"\n"
"\t"STUB_ASM_CODE("1076")"\n"

STUB_ASM_ENTRY("glIsBuffer")"\n"
"\t"STUB_ASM_CODE("475")"\n"

STUB_ASM_ENTRY("glIsEnabled")"\n"
"\t"STUB_ASM_CODE("286")"\n"

STUB_ASM_ENTRY("glIsEnabledi")"\n"
"\t"STUB_ASM_CODE("595")"\n"

STUB_ASM_ENTRY("glIsFramebuffer")"\n"
"\t"STUB_ASM_CODE("677")"\n"

STUB_ASM_ENTRY("glIsProgram")"\n"
"\t"STUB_ASM_CODE("507")"\n"

STUB_ASM_ENTRY("glIsProgramPipeline")"\n"
"\t"STUB_ASM_CODE("1105")"\n"

STUB_ASM_ENTRY("glIsQuery")"\n"
"\t"STUB_ASM_CODE("476")"\n"

STUB_ASM_ENTRY("glIsRenderbuffer")"\n"
"\t"STUB_ASM_CODE("678")"\n"

STUB_ASM_ENTRY("glIsSampler")"\n"
"\t"STUB_ASM_CODE("724")"\n"

STUB_ASM_ENTRY("glIsShader")"\n"
"\t"STUB_ASM_CODE("508")"\n"

STUB_ASM_ENTRY("glIsSync")"\n"
"\t"STUB_ASM_CODE("700")"\n"

STUB_ASM_ENTRY("glIsTexture")"\n"
"\t"STUB_ASM_CODE("330")"\n"

STUB_ASM_ENTRY("glIsTransformFeedback")"\n"
"\t"STUB_ASM_CODE("806")"\n"

STUB_ASM_ENTRY("glIsVertexArray")"\n"
"\t"STUB_ASM_CODE("686")"\n"

STUB_ASM_ENTRY("glLineWidth")"\n"
"\t"STUB_ASM_CODE("168")"\n"

STUB_ASM_ENTRY("glLinkProgram")"\n"
"\t"STUB_ASM_CODE("509")"\n"

STUB_ASM_ENTRY("glMapBufferRange")"\n"
"\t"STUB_ASM_CODE("682")"\n"

STUB_ASM_ENTRY("glMemoryBarrier")"\n"
"\t"STUB_ASM_CODE("869")"\n"

STUB_ASM_ENTRY("glMemoryBarrierByRegion")"\n"
"\t"STUB_ASM_CODE("621")"\n"

STUB_ASM_ENTRY("glMinSampleShading")"\n"
"\t"STUB_ASM_CODE("620")"\n"

STUB_ASM_ENTRY("glObjectLabel")"\n"
"\t"STUB_ASM_CODE("1167")"\n"

STUB_ASM_ENTRY("glObjectPtrLabel")"\n"
"\t"STUB_ASM_CODE("1168")"\n"

STUB_ASM_ENTRY("glPatchParameteri")"\n"
"\t"STUB_ASM_CODE("801")"\n"

STUB_ASM_ENTRY("glPauseTransformFeedback")"\n"
"\t"STUB_ASM_CODE("807")"\n"

STUB_ASM_ENTRY("glPixelStorei")"\n"
"\t"STUB_ASM_CODE("250")"\n"

STUB_ASM_ENTRY("glPolygonOffset")"\n"
"\t"STUB_ASM_CODE("319")"\n"

STUB_ASM_ENTRY("glPopDebugGroup")"\n"
"\t"STUB_ASM_CODE("1169")"\n"

STUB_ASM_ENTRY("glPrimitiveBoundingBox")"\n"
"\t"STUB_ASM_CODE("1419")"\n"

STUB_ASM_ENTRY("glProgramBinary")"\n"
"\t"STUB_ASM_CODE("819")"\n"

STUB_ASM_ENTRY("glProgramParameteri")"\n"
"\t"STUB_ASM_CODE("820")"\n"

STUB_ASM_ENTRY("glProgramUniform1f")"\n"
"\t"STUB_ASM_CODE("1109")"\n"

STUB_ASM_ENTRY("glProgramUniform1fv")"\n"
"\t"STUB_ASM_CODE("1110")"\n"

STUB_ASM_ENTRY("glProgramUniform1i")"\n"
"\t"STUB_ASM_CODE("1111")"\n"

STUB_ASM_ENTRY("glProgramUniform1iv")"\n"
"\t"STUB_ASM_CODE("1112")"\n"

STUB_ASM_ENTRY("glProgramUniform1ui")"\n"
"\t"STUB_ASM_CODE("1113")"\n"

STUB_ASM_ENTRY("glProgramUniform1uiv")"\n"
"\t"STUB_ASM_CODE("1114")"\n"

STUB_ASM_ENTRY("glProgramUniform2f")"\n"
"\t"STUB_ASM_CODE("1117")"\n"

STUB_ASM_ENTRY("glProgramUniform2fv")"\n"
"\t"STUB_ASM_CODE("1118")"\n"

STUB_ASM_ENTRY("glProgramUniform2i")"\n"
"\t"STUB_ASM_CODE("1119")"\n"

STUB_ASM_ENTRY("glProgramUniform2iv")"\n"
"\t"STUB_ASM_CODE("1120")"\n"

STUB_ASM_ENTRY("glProgramUniform2ui")"\n"
"\t"STUB_ASM_CODE("1121")"\n"

STUB_ASM_ENTRY("glProgramUniform2uiv")"\n"
"\t"STUB_ASM_CODE("1122")"\n"

STUB_ASM_ENTRY("glProgramUniform3f")"\n"
"\t"STUB_ASM_CODE("1125")"\n"

STUB_ASM_ENTRY("glProgramUniform3fv")"\n"
"\t"STUB_ASM_CODE("1126")"\n"

STUB_ASM_ENTRY("glProgramUniform3i")"\n"
"\t"STUB_ASM_CODE("1127")"\n"

STUB_ASM_ENTRY("glProgramUniform3iv")"\n"
"\t"STUB_ASM_CODE("1128")"\n"

STUB_ASM_ENTRY("glProgramUniform3ui")"\n"
"\t"STUB_ASM_CODE("1129")"\n"

STUB_ASM_ENTRY("glProgramUniform3uiv")"\n"
"\t"STUB_ASM_CODE("1130")"\n"

STUB_ASM_ENTRY("glProgramUniform4f")"\n"
"\t"STUB_ASM_CODE("1133")"\n"

STUB_ASM_ENTRY("glProgramUniform4fv")"\n"
"\t"STUB_ASM_CODE("1134")"\n"

STUB_ASM_ENTRY("glProgramUniform4i")"\n"
"\t"STUB_ASM_CODE("1135")"\n"

STUB_ASM_ENTRY("glProgramUniform4iv")"\n"
"\t"STUB_ASM_CODE("1136")"\n"

STUB_ASM_ENTRY("glProgramUniform4ui")"\n"
"\t"STUB_ASM_CODE("1137")"\n"

STUB_ASM_ENTRY("glProgramUniform4uiv")"\n"
"\t"STUB_ASM_CODE("1138")"\n"

STUB_ASM_ENTRY("glProgramUniformMatrix2fv")"\n"
"\t"STUB_ASM_CODE("1140")"\n"

STUB_ASM_ENTRY("glProgramUniformMatrix2x3fv")"\n"
"\t"STUB_ASM_CODE("1142")"\n"

STUB_ASM_ENTRY("glProgramUniformMatrix2x4fv")"\n"
"\t"STUB_ASM_CODE("1144")"\n"

STUB_ASM_ENTRY("glProgramUniformMatrix3fv")"\n"
"\t"STUB_ASM_CODE("1146")"\n"

STUB_ASM_ENTRY("glProgramUniformMatrix3x2fv")"\n"
"\t"STUB_ASM_CODE("1148")"\n"

STUB_ASM_ENTRY("glProgramUniformMatrix3x4fv")"\n"
"\t"STUB_ASM_CODE("1150")"\n"

STUB_ASM_ENTRY("glProgramUniformMatrix4fv")"\n"
"\t"STUB_ASM_CODE("1152")"\n"

STUB_ASM_ENTRY("glProgramUniformMatrix4x2fv")"\n"
"\t"STUB_ASM_CODE("1154")"\n"

STUB_ASM_ENTRY("glProgramUniformMatrix4x3fv")"\n"
"\t"STUB_ASM_CODE("1156")"\n"

STUB_ASM_ENTRY("glPushDebugGroup")"\n"
"\t"STUB_ASM_CODE("1170")"\n"

STUB_ASM_ENTRY("glReadBuffer")"\n"
"\t"STUB_ASM_CODE("254")"\n"

STUB_ASM_ENTRY("glReadPixels")"\n"
"\t"STUB_ASM_CODE("256")"\n"

STUB_ASM_ENTRY("glReadnPixels")"\n"
"\t"STUB_ASM_CODE("860")"\n"

STUB_ASM_ENTRY("glReleaseShaderCompiler")"\n"
"\t"STUB_ASM_CODE("816")"\n"

STUB_ASM_ENTRY("glRenderbufferStorage")"\n"
"\t"STUB_ASM_CODE("679")"\n"

STUB_ASM_ENTRY("glRenderbufferStorageMultisample")"\n"
"\t"STUB_ASM_CODE("680")"\n"

STUB_ASM_ENTRY("glResumeTransformFeedback")"\n"
"\t"STUB_ASM_CODE("808")"\n"

STUB_ASM_ENTRY("glSampleCoverage")"\n"
"\t"STUB_ASM_CODE("419")"\n"

STUB_ASM_ENTRY("glSampleMaski")"\n"
"\t"STUB_ASM_CODE("708")"\n"

STUB_ASM_ENTRY("glSamplerParameterIiv")"\n"
"\t"STUB_ASM_CODE("725")"\n"

STUB_ASM_ENTRY("glSamplerParameterIuiv")"\n"
"\t"STUB_ASM_CODE("726")"\n"

STUB_ASM_ENTRY("glSamplerParameterf")"\n"
"\t"STUB_ASM_CODE("727")"\n"

STUB_ASM_ENTRY("glSamplerParameterfv")"\n"
"\t"STUB_ASM_CODE("728")"\n"

STUB_ASM_ENTRY("glSamplerParameteri")"\n"
"\t"STUB_ASM_CODE("729")"\n"

STUB_ASM_ENTRY("glSamplerParameteriv")"\n"
"\t"STUB_ASM_CODE("730")"\n"

STUB_ASM_ENTRY("glScissor")"\n"
"\t"STUB_ASM_CODE("176")"\n"

STUB_ASM_ENTRY("glShaderBinary")"\n"
"\t"STUB_ASM_CODE("817")"\n"

STUB_ASM_ENTRY("glShaderSource")"\n"
"\t"STUB_ASM_CODE("510")"\n"

STUB_ASM_ENTRY("glStencilFunc")"\n"
"\t"STUB_ASM_CODE("243")"\n"

STUB_ASM_ENTRY("glStencilFuncSeparate")"\n"
"\t"STUB_ASM_CODE("511")"\n"

STUB_ASM_ENTRY("glStencilMask")"\n"
"\t"STUB_ASM_CODE("209")"\n"

STUB_ASM_ENTRY("glStencilMaskSeparate")"\n"
"\t"STUB_ASM_CODE("512")"\n"

STUB_ASM_ENTRY("glStencilOp")"\n"
"\t"STUB_ASM_CODE("244")"\n"

STUB_ASM_ENTRY("glStencilOpSeparate")"\n"
"\t"STUB_ASM_CODE("513")"\n"

STUB_ASM_ENTRY("glTexBuffer")"\n"
"\t"STUB_ASM_CODE("615")"\n"

STUB_ASM_ENTRY("glTexBufferRange")"\n"
"\t"STUB_ASM_CODE("900")"\n"

STUB_ASM_ENTRY("glTexImage2D")"\n"
"\t"STUB_ASM_CODE("183")"\n"

STUB_ASM_ENTRY("glTexImage3D")"\n"
"\t"STUB_ASM_CODE("371")"\n"

STUB_ASM_ENTRY("glTexParameterIiv")"\n"
"\t"STUB_ASM_CODE("596")"\n"

STUB_ASM_ENTRY("glTexParameterIuiv")"\n"
"\t"STUB_ASM_CODE("597")"\n"

STUB_ASM_ENTRY("glTexParameterf")"\n"
"\t"STUB_ASM_CODE("178")"\n"

STUB_ASM_ENTRY("glTexParameterfv")"\n"
"\t"STUB_ASM_CODE("179")"\n"

STUB_ASM_ENTRY("glTexParameteri")"\n"
"\t"STUB_ASM_CODE("180")"\n"

STUB_ASM_ENTRY("glTexParameteriv")"\n"
"\t"STUB_ASM_CODE("181")"\n"

STUB_ASM_ENTRY("glTexStorage2D")"\n"
"\t"STUB_ASM_CODE("871")"\n"

STUB_ASM_ENTRY("glTexStorage2DMultisample")"\n"
"\t"STUB_ASM_CODE("901")"\n"

STUB_ASM_ENTRY("glTexStorage3D")"\n"
"\t"STUB_ASM_CODE("872")"\n"

STUB_ASM_ENTRY("glTexStorage3DMultisample")"\n"
"\t"STUB_ASM_CODE("902")"\n"

STUB_ASM_ENTRY("glTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("333")"\n"

STUB_ASM_ENTRY("glTexSubImage3D")"\n"
"\t"STUB_ASM_CODE("372")"\n"

STUB_ASM_ENTRY("glTransformFeedbackVaryings")"\n"
"\t"STUB_ASM_CODE("598")"\n"

STUB_ASM_ENTRY("glUniform1f")"\n"
"\t"STUB_ASM_CODE("514")"\n"

STUB_ASM_ENTRY("glUniform1fv")"\n"
"\t"STUB_ASM_CODE("515")"\n"

STUB_ASM_ENTRY("glUniform1i")"\n"
"\t"STUB_ASM_CODE("516")"\n"

STUB_ASM_ENTRY("glUniform1iv")"\n"
"\t"STUB_ASM_CODE("517")"\n"

STUB_ASM_ENTRY("glUniform1ui")"\n"
"\t"STUB_ASM_CODE("599")"\n"

STUB_ASM_ENTRY("glUniform1uiv")"\n"
"\t"STUB_ASM_CODE("600")"\n"

STUB_ASM_ENTRY("glUniform2f")"\n"
"\t"STUB_ASM_CODE("518")"\n"

STUB_ASM_ENTRY("glUniform2fv")"\n"
"\t"STUB_ASM_CODE("519")"\n"

STUB_ASM_ENTRY("glUniform2i")"\n"
"\t"STUB_ASM_CODE("520")"\n"

STUB_ASM_ENTRY("glUniform2iv")"\n"
"\t"STUB_ASM_CODE("521")"\n"

STUB_ASM_ENTRY("glUniform2ui")"\n"
"\t"STUB_ASM_CODE("601")"\n"

STUB_ASM_ENTRY("glUniform2uiv")"\n"
"\t"STUB_ASM_CODE("602")"\n"

STUB_ASM_ENTRY("glUniform3f")"\n"
"\t"STUB_ASM_CODE("522")"\n"

STUB_ASM_ENTRY("glUniform3fv")"\n"
"\t"STUB_ASM_CODE("523")"\n"

STUB_ASM_ENTRY("glUniform3i")"\n"
"\t"STUB_ASM_CODE("524")"\n"

STUB_ASM_ENTRY("glUniform3iv")"\n"
"\t"STUB_ASM_CODE("525")"\n"

STUB_ASM_ENTRY("glUniform3ui")"\n"
"\t"STUB_ASM_CODE("603")"\n"

STUB_ASM_ENTRY("glUniform3uiv")"\n"
"\t"STUB_ASM_CODE("604")"\n"

STUB_ASM_ENTRY("glUniform4f")"\n"
"\t"STUB_ASM_CODE("526")"\n"

STUB_ASM_ENTRY("glUniform4fv")"\n"
"\t"STUB_ASM_CODE("527")"\n"

STUB_ASM_ENTRY("glUniform4i")"\n"
"\t"STUB_ASM_CODE("528")"\n"

STUB_ASM_ENTRY("glUniform4iv")"\n"
"\t"STUB_ASM_CODE("529")"\n"

STUB_ASM_ENTRY("glUniform4ui")"\n"
"\t"STUB_ASM_CODE("605")"\n"

STUB_ASM_ENTRY("glUniform4uiv")"\n"
"\t"STUB_ASM_CODE("606")"\n"

STUB_ASM_ENTRY("glUniformBlockBinding")"\n"
"\t"STUB_ASM_CODE("693")"\n"

STUB_ASM_ENTRY("glUniformMatrix2fv")"\n"
"\t"STUB_ASM_CODE("530")"\n"

STUB_ASM_ENTRY("glUniformMatrix2x3fv")"\n"
"\t"STUB_ASM_CODE("564")"\n"

STUB_ASM_ENTRY("glUniformMatrix2x4fv")"\n"
"\t"STUB_ASM_CODE("565")"\n"

STUB_ASM_ENTRY("glUniformMatrix3fv")"\n"
"\t"STUB_ASM_CODE("531")"\n"

STUB_ASM_ENTRY("glUniformMatrix3x2fv")"\n"
"\t"STUB_ASM_CODE("566")"\n"

STUB_ASM_ENTRY("glUniformMatrix3x4fv")"\n"
"\t"STUB_ASM_CODE("567")"\n"

STUB_ASM_ENTRY("glUniformMatrix4fv")"\n"
"\t"STUB_ASM_CODE("532")"\n"

STUB_ASM_ENTRY("glUniformMatrix4x2fv")"\n"
"\t"STUB_ASM_CODE("568")"\n"

STUB_ASM_ENTRY("glUniformMatrix4x3fv")"\n"
"\t"STUB_ASM_CODE("569")"\n"

STUB_ASM_ENTRY("glUnmapBuffer")"\n"
"\t"STUB_ASM_CODE("478")"\n"

STUB_ASM_ENTRY("glUseProgram")"\n"
"\t"STUB_ASM_CODE("533")"\n"

STUB_ASM_ENTRY("glUseProgramStages")"\n"
"\t"STUB_ASM_CODE("1158")"\n"

STUB_ASM_ENTRY("glValidateProgram")"\n"
"\t"STUB_ASM_CODE("534")"\n"

STUB_ASM_ENTRY("glValidateProgramPipeline")"\n"
"\t"STUB_ASM_CODE("1159")"\n"

STUB_ASM_ENTRY("glVertexAttrib1f")"\n"
"\t"STUB_ASM_CODE("641")"\n"

STUB_ASM_ENTRY("glVertexAttrib1fv")"\n"
"\t"STUB_ASM_CODE("642")"\n"

STUB_ASM_ENTRY("glVertexAttrib2f")"\n"
"\t"STUB_ASM_CODE("643")"\n"

STUB_ASM_ENTRY("glVertexAttrib2fv")"\n"
"\t"STUB_ASM_CODE("644")"\n"

STUB_ASM_ENTRY("glVertexAttrib3f")"\n"
"\t"STUB_ASM_CODE("645")"\n"

STUB_ASM_ENTRY("glVertexAttrib3fv")"\n"
"\t"STUB_ASM_CODE("646")"\n"

STUB_ASM_ENTRY("glVertexAttrib4f")"\n"
"\t"STUB_ASM_CODE("647")"\n"

STUB_ASM_ENTRY("glVertexAttrib4fv")"\n"
"\t"STUB_ASM_CODE("648")"\n"

STUB_ASM_ENTRY("glVertexAttribBinding")"\n"
"\t"STUB_ASM_CODE("883")"\n"

STUB_ASM_ENTRY("glVertexAttribDivisor")"\n"
"\t"STUB_ASM_CODE("619")"\n"

STUB_ASM_ENTRY("glVertexAttribFormat")"\n"
"\t"STUB_ASM_CODE("884")"\n"

STUB_ASM_ENTRY("glVertexAttribI4i")"\n"
"\t"STUB_ASM_CODE("1289")"\n"

STUB_ASM_ENTRY("glVertexAttribI4iv")"\n"
"\t"STUB_ASM_CODE("1290")"\n"

STUB_ASM_ENTRY("glVertexAttribI4ui")"\n"
"\t"STUB_ASM_CODE("1291")"\n"

STUB_ASM_ENTRY("glVertexAttribI4uiv")"\n"
"\t"STUB_ASM_CODE("1292")"\n"

STUB_ASM_ENTRY("glVertexAttribIFormat")"\n"
"\t"STUB_ASM_CODE("885")"\n"

STUB_ASM_ENTRY("glVertexAttribIPointer")"\n"
"\t"STUB_ASM_CODE("613")"\n"

STUB_ASM_ENTRY("glVertexAttribPointer")"\n"
"\t"STUB_ASM_CODE("563")"\n"

STUB_ASM_ENTRY("glVertexBindingDivisor")"\n"
"\t"STUB_ASM_CODE("887")"\n"

STUB_ASM_ENTRY("glViewport")"\n"
"\t"STUB_ASM_CODE("305")"\n"

STUB_ASM_ENTRY("glWaitSync")"\n"
"\t"STUB_ASM_CODE("701")"\n"

);
#undef MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN
#endif /* MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN */

