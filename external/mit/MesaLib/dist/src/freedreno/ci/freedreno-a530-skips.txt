# Note: skips lists for CI are just a list of lines that, when
# non-zero-length and not starting with '#', will regex match to
# delete lines from the test list.  Be careful.

# Times out
dEQP-GLES31.functional.ssbo.layout.random.all_shared_buffer.36

# Intermittent timeouts in CI (~1/month)
dEQP-GLES3.functional.shaders.builtin_functions.precision.cosh.mediump_fragment.vec3
dEQP-GLES3.functional.shaders.builtin_functions.precision.faceforward.lowp_fragment.vec4
dEQP-GLES3.functional.shaders.builtin_functions.precision.sinh.mediump_vertex.vec3
dEQP-GLES3.functional.shaders.builtin_functions.precision.tanh.highp_fragment.vec3
dEQP-GLES31.functional.shaders.builtin_functions.precision.distance.lowp_compute.vec4
dEQP-GLES31.functional.shaders.builtin_functions.precision.pow.highp_compute.vec3
dEQP-GLES31.functional.shaders.builtin_functions.precision.sqrt.highp_compute.vec3
dEQP-GLES31.functional.shaders.builtin_functions.precision.tanh.lowp_compute.vec3

# Takes more than a few minutes, time is spent in batch_draw_tracking().
KHR-GLES31.core.shader_image_load_store.basic-allFormats-store-fs

# Sometimes times out in CI.  I think it's spending time in the compiler, and so
# then the flake-detect run usually passes once shaders are cached.
KHR-GLES31.core.arrays_of_arrays.SizedDeclarationsPrimitive

# Intermittent timeouts
spec@ext_texture_lod_bias@lodbias
spec@!opengl 1.0@gl-1.0-blend-func

# Skip over a bunch of extensions since we don't have extension fast skipping yet.
spec@glsl-1.50
spec@glsl-4.*
spec@arb_gpu_shader5
spec@arb_gpu_shader_fp64
spec@arb_gpu_shader_int64
spec@arb_tessellation_shader

# Skip flaky piglit MSAA, which is well covered by our xfails in dEQP
arb_texture_multisample
ext_framebuffer_multisample

# 1.5 minutes
spec@!opengl 1.2@tex3d-maxsize

# ~1 minute
glx@glx-multithread-texture
spec@!opengl 1.1@draw-sync
spec@glsl-1.30@execution@texelfetch fs sampler2d 1x281-501x281
spec@glsl-1.30@execution@texelfetch fs sampler2darray 98x1x9-98x129x9
spec@glsl-1.30@execution@texelfetch fs sampler2darray 1x129x9-98x129x9
spec@!opengl 2.0@tex3d-npot

# This one seems to be triggering faults and causing random other fails
# depending on what else was running at the time:
spec@arb_texture_cube_map_array@texsubimage cube_map_array
spec@arb_pixel_buffer_object@texsubimage cube_map_array pbo

# Causes faults that need the HUPCF fix to actually work to avoid killing the
# run.
spec@glsl-1.30@execution@texelfetch fs sampler3d 98x1x9-98x129x9

# If we let these tests run in parallel with other piglit tests, we end up
# intermittent GL_OUT_OF_MEMORY errors in innocent tests.
arb_texture_buffer_object@max-size
fbo-maxsize
max-texture-size
copypixels-draw-sync
